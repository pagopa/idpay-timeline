{
	"info": {
		"_postman_id": "1e36c342-c8fb-4b09-8a3a-e0971f1685eb",
		"name": "Timeline - e2e",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "37939936"
	},
	"item": [
		{
			"name": "IDPAYCODE",
			"item": [
				{
					"name": "Happy Case",
					"item": [
						{
							"name": "Initiative creation",
							"item": [
								{
									"name": "ENTE - Initiative creation",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Payment - Happy case - IdpayCode - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrlIdPay}}/welfare/token/test"
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
															"const serviceName = 'Test funzionali App IO IdpayCode ' + now;\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP1 - Responses with 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP1 - Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrlIdPay}}/initiative/info",
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
															"\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"pm.collectionVariables.set('budget', 500);\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', false);\r",
															"pm.collectionVariables.set('rankingEnabled', false);\r",
															"pm.collectionVariables.set('beneficiaryBudget', 100);//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', today);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP2 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/initiative/:initiativeId/general",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"initiative",
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3-Update Initiative (criteria)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP3 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrlIdPay}}/initiative/{{initiativeId}}/beneficiary"
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if( pm.response.code != 204){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} \r",
															"\r",
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP4 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 50);\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxThresholdFrom', 50);\r",
															"pm.collectionVariables.set('trxThresholdTo', 80);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"initiativeRewardType\": \"DISCOUNT\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n      \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/initiative/:initiativeId/reward",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"initiative",
														":initiativeId",
														"reward"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP5-Update Initiative Refund Rule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP5 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\r\n     \"timeParameter\": {\r\n        \"timeType\": \"DAILY\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/initiative/:initiativeId/refund",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"initiative",
														":initiativeId",
														"refund"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PAGOPA - Initiative update status APPROVED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Payment - Happy case - IdpayCode - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrlIdPay}}/welfare/token/test"
											},
											"response": []
										},
										{
											"name": "Update initiative into APPROVED status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(function(){}, 20000); //milliseconds"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalTokenPagopa}}"
													}
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": "{{baseUrlIdPay}}/initiative/{{initiativeId}}/approved"
											},
											"response": []
										}
									]
								},
								{
									"name": "ENTE - Initiative PUBLISHED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Payment - Happy case - IdpayCode - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrlIdPay}}/welfare/token/test"
											},
											"response": []
										},
										{
											"name": "Initiative PUBLISHED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "PUT",
												"header": [],
												"url": "{{baseUrlIdPay}}/initiative/{{initiativeId}}/published"
											},
											"response": []
										}
									]
								},
								{
									"name": "Upload csv",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Payment - Happy case - IdpayCode - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrlIdPay}}/welfare/token/test"
											},
											"response": []
										},
										{
											"name": "Upload csv",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Payment - Happy case - IdpayCode - Upload csv - Response status is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Payment - Happy case - IdpayCode - Upload csv - Verify response body contains status: VALIDATED\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse.status).eql(\"VALIDATED\");\r",
															"    \r",
															"    pm.collectionVariables.set(\"dateFrom\", jsonResponse.elabTimeStamp);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "./postman/example_merchant_valid.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/merchant/initiative/{{initiativeId}}/upload",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"merchant",
														"initiative",
														"{{initiativeId}}",
														"upload"
													],
													"query": [
														{
															"key": "",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Merchant list on initiative",
									"item": [
										{
											"name": "Get Merchant List",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const jsonResponse = pm.response.json().content[0];\r",
															"\r",
															"if( pm.response.code != 200 || jsonResponse == undefined ){\r",
															"   retryRequest(postman,pm,setTimeout,5000);\r",
															"}else{\r",
															"\r",
															"pm.test(\"Payment - Happy case - IdpayCode - Get merchant list - Response status is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Payment - Happy case - IdpayCode - Get merchant list - Verify response body contains merchantId,businessName,fiscalCode,merchantStatus,updateStatusDate\", function () {\r",
															"\r",
															"    pm.expect(jsonResponse).have.property(\"merchantId\");\r",
															"    pm.expect(jsonResponse).have.property(\"businessName\");\r",
															"    pm.expect(jsonResponse).have.property(\"fiscalCode\");\r",
															"    pm.expect(jsonResponse).have.property(\"merchantStatus\");\r",
															"    pm.expect(jsonResponse).have.property(\"updateStatusDate\");\r",
															"\r",
															"    pm.collectionVariables.set(\"merchantId\", jsonResponse.merchantId);\r",
															"    pm.collectionVariables.set(\"merchantFiscalCode\", jsonResponse.fiscalCode);\r",
															"});\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": "{{baseUrlIdPay}}/merchant/initiative/{{initiativeId}}/merchants"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Onboarding",
							"item": [
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Wallet - Happy case - Initiative discount - Onboarding - Generate Token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {},90000)"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_fake}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 204){\r",
													"   retryRequest(postman,pm,setTimeout,5000);\r",
													"} \r",
													" \r",
													"pm.test(\"Wallet - Happy case - Initiative discount - Onboarding - Accept T&C - return status 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}/onboarding/"
									},
									"response": []
								},
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Wallet - Happy case - Initiative discount - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}/onboarding/initiative"
									},
									"response": []
								},
								{
									"name": "PDND + Autocertification",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Wallet - Happy case - Initiative discount - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}/onboarding/consent"
									},
									"response": []
								}
							]
						},
						{
							"name": "Enroll idpayCode",
							"item": [
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 200){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"    pm.test('Payment - Happy case - IdpayCode - Enroll code - Generate Token IO', () => {\r",
													"        //verify response HTTP status \r",
													"        pm.response.to.have.status(200);\r",
													"        pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_fake}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 200){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"    pm.test(\"Payment - Happy case:  Generate Code [IDPAYCODE]\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"    pm.test(\"Payment - Happy case: Generate Code [IDPAYCODE] - Verify response body contains fields\", function () {\r",
													"        let jsonResponse = pm.response.json();\r",
													"        pm.expect(jsonResponse).to.have.property(\"idpayCode\");\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}wallet/code/generate"
									},
									"response": []
								},
								{
									"name": "Enroll Code from Wallet",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 200){\r",
													"   retryRequest(postman,pm,setTimeout,5000);\r",
													"} else {\r",
													" \r",
													"    pm.test(\"Payment - Happy case:  Enroll Code [IDPAYCODE]\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}wallet/{{initiativeId}}/code/instruments"
									},
									"response": []
								},
								{
									"name": "Get Payment Instrument List",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();\r",
													"var instrumentList = jsonResponse.instrumentList.length;\r",
													"\r",
													"if( pm.response.code != 200 || instrumentList < 2 ){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"    pm.test(\"Payment - Happy case: Payment Instrument List [IDPAYCODE]\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Payment - Happy case: Payment Instrument List [IDPAYCODE] - Verify response body contains fields\", function () {\r",
													"    let jsonResponse = pm.response.json();\r",
													"    \r",
													"    pm.expect(jsonResponse.instrumentList).to.have.lengthOf(2);\r",
													"\r",
													"    const response = pm.response.json().instrumentList[1];\r",
													"    pm.expect(response).to.have.property(\"instrumentId\");\r",
													"    pm.expect(response).to.have.property(\"status\");\r",
													"    pm.expect(response).to.have.property(\"channel\");\r",
													"    pm.expect(response).to.have.property(\"instrumentType\");\r",
													"    pm.expect(response.instrumentType).equals(\"IDPAYCODE\");\r",
													"    \r",
													"    pm.collectionVariables.set(\"idpayCode-instrumentId\", response.instrumentId);\r",
													"  \r",
													"});\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													" \r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}wallet/{{initiativeId}}/instruments"
									},
									"response": []
								}
							]
						},
						{
							"name": "User suspend",
							"item": [
								{
									"name": "Suspend User Discount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 204){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} \r",
													"\r",
													"pm.test('Payment - IdpayCode -  SUSPENDED user - Suspend user', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{identityPortalToken}}"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Fiscal-Code",
												"value": "{{CF_fake}}",
												"type": "text"
											}
										],
										"url": "{{baseUrlIdPay}}/initiative/{{initiativeId}}/beneficiary/suspend"
									},
									"response": []
								}
							]
						},
						{
							"name": "User readmitted",
							"item": [
								{
									"name": "readmit User Discount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 204){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} \r",
													"\r",
													"pm.test('Payment - IdpayCode - READMITTED user - Readmit user', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{identityPortalToken}}"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Fiscal-Code",
												"value": "{{CF_fake}}",
												"type": "text"
											}
										],
										"url": "{{baseUrlIdPay}}/initiative/{{initiativeId}}/beneficiary/readmit"
									},
									"response": []
								}
							]
						},
						{
							"name": "User unsubscribed",
							"item": [
								{
									"name": "Unsubscribe - Ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 204){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} \r",
													"\r",
													"pm.test(\"Payment - IdpayCode - UNSUBSCRIBED user - Unsubscribe - Response status is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}/wallet/{{initiativeId}}/unsubscribe"
									},
									"response": []
								}
							]
						},
						{
							"name": "GET Timeline",
							"item": [
								{
									"name": "Get Timeline OK Case Without filter",
									"item": [
										{
											"name": "GET Timeline - OK Without filter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var operationList = jsonResponse.operationList.length;\r",
															"\r",
															"if( pm.response.code != 200 || operationList < 5){\r",
															"   retryRequest(postman,pm,setTimeout,5000);\r",
															"} else {\r",
															"\r",
															"    pm.test(\"Timeline - Happy case - Get Timeline without filter - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case - Get Timeline without filter  - expect operation list to have all element\", function () {\r",
															"        pm.expect(jsonResponse.operationList.length).equals(5);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/timeline/{{initiativeId}}/?page=0&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"timeline",
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline && Detail OK Case Filter By Event ADD_INSTRUMENT",
									"item": [
										{
											"name": "GET Timeline - OK Filter By Event ADD_INSTRUMENT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationList[0].operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"ADD_INSTRUMENT\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} \r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline with filter by event: ADD_INSTRUMENT - expect res status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline with filter by event: ADD_INSTRUMENT - expect operation list to have one element and  operationType field in response to be equal: ADD_INSTRUMENT\", function () {\r",
															"    pm.expect(jsonResponse.operationList.length).equals(1);\r",
															"    pm.expect(jsonResponse.operationList[0].operationType).equals('ADD_INSTRUMENT');\r",
															"    pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&operationType=ADD_INSTRUMENT&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "ADD_INSTRUMENT"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Timeline Detail ADD INSTRUMENT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"ADD_INSTRUMENT\" ){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} \r",
															"\r",
															"pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect res status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect operationType ADD_INSTRUMENT\", function () {\r",
															"    pm.expect(jsonResponse.operationType).equals('ADD_INSTRUMENT');\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/{{operationId}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														"{{operationId}}"
													],
													"query": [
														{
															"key": "operationType",
															"value": "TRANSACTION",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline && Detail OK Case Filter By Event ONBOARDING",
									"item": [
										{
											"name": "GET Timeline - OK Filter By Event ONBOARDING",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationList[0].operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"ONBOARDING\" ){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} \r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline with filter by event: ONBOARDING - expect res status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline with filter by event: ONBOARDING - expect operation list to have one element and  operationType field in response to be equal: ONBOARDING\", function () {\r",
															"    let jsonResponse = pm.response.json()\r",
															"    pm.expect(jsonResponse.operationList.length).equals(1);\r",
															"    pm.expect(jsonResponse.operationList[0].operationType).equals('ONBOARDING');\r",
															"    pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&operationType=ONBOARDING&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "ONBOARDING"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Timeline Detail ONBOARDING",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationType;\r",
															"\r",
															"if( pm.response.code != 200  || responseOperationType != \"ONBOARDING\" ){\r",
															"  retryRequest(postman,pm,setTimeout,3000);\r",
															"} \r",
															"\r",
															"pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operationType ONBOARDING - expect res status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operationType ONBOARDING - expect operationType ONBOARDING\", function () {\r",
															"    pm.expect(jsonResponse.operationType).equals('ONBOARDING');\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/{{operationId}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														"{{operationId}}"
													],
													"query": [
														{
															"key": "operationType",
															"value": "TRANSACTION",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline && Detail OK Case Filter By Event User SUSPENDED",
									"item": [
										{
											"name": "GET Timeline - OK Filter By Event user SUSPENDED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationList[0].operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"SUSPENDED\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} \r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline with filter by event: SUSPENDED - expect res status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline with filter by event: SUSPENDED - expect operation list to have one element and  operationType field in response to be equal: SUSPENDED\", function () {\r",
															"    pm.expect(jsonResponse.operationList.length).equals(1);\r",
															"    pm.expect(jsonResponse.operationList[0].operationType).equals('SUSPENDED');\r",
															"    pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&operationType=SUSPENDED&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "SUSPENDED"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Timeline Detail SUSPENDED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"SUSPENDED\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} \r",
															"\r",
															"pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect res status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect operationType SUSPENDED\", function () {\r",
															"    let jsonResponse = pm.response.json()\r",
															"   pm.expect(jsonResponse.operationType).equals('SUSPENDED');\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/{{operationId}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														"{{operationId}}"
													],
													"query": [
														{
															"key": "operationType",
															"value": "TRANSACTION",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline && Detail OK Case Filter By Event User READMITTED",
									"item": [
										{
											"name": "GET Timeline - OK Filter By Event user READMITTED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationList[0].operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"READMITTED\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} \r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline with filter by event: READMITTED - expect res status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline with filter by event: READMITTED - expect operation list to have one element and  operationType field in response to be equal: READMITTED\", function () {\r",
															"    pm.expect(jsonResponse.operationList.length).equals(1);\r",
															"    pm.expect(jsonResponse.operationList[0].operationType).equals('READMITTED');\r",
															"    pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&operationType=READMITTED&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "READMITTED"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Timeline Detail READMITTED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"READMITTED\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} \r",
															"\r",
															"pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect res status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect operationType READMITTED\", function () {\r",
															"    pm.expect(jsonResponse.operationType).equals('READMITTED');\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/{{operationId}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														"{{operationId}}"
													],
													"query": [
														{
															"key": "operationType",
															"value": "TRANSACTION",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline && Detail OK Case Filter By Event User UNSUBSCRIBED",
									"item": [
										{
											"name": "GET Timeline - OK Filter By Event user UNSUBSCRIBED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationList[0].operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"UNSUBSCRIBED\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} \r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline with filter by event: UNSUBSCRIBED - expect res status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline with filter by event: UNSUBSCRIBED - expect operation list to have one element and  operationType field in response to be equal:UNSUBSCRIBED\", function () {\r",
															"    pm.expect(jsonResponse.operationList.length).equals(1);\r",
															"    pm.expect(jsonResponse.operationList[0].operationType).equals('UNSUBSCRIBED');\r",
															"    pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&operationType=UNSUBSCRIBED&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "UNSUBSCRIBED"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Timeline Detail UNSUBSCRIBED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"UNSUBSCRIBED\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} \r",
															"\r",
															"pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect res status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect operationType UNSUBSCRIBED\", function () {\r",
															"    let jsonResponse = pm.response.json()\r",
															"    pm.expect(jsonResponse.operationType).equals('UNSUBSCRIBED');\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/{{operationId}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														"{{operationId}}"
													],
													"query": [
														{
															"key": "operationType",
															"value": "TRANSACTION",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline OK Case Filter By DateFrom (existing Date)",
									"item": [
										{
											"name": "GET Timeline - OK Filter By DateFrom (existing Date)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var operationList = jsonResponse.operationList.length;\r",
															"\r",
															"if( pm.response.code != 200 || operationList < 5){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} \r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline with filter by DateFrom - with a real date - expect res status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline with filter by DateFrom - expect field operationList to have 5 events that have date from the filter\", function () {\r",
															"    pm.expect(jsonResponse.operationList.length).equals(5);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"let today = String(moment().format(\"yyyy-MM-DD\")).concat(\"T00%3A00%3A00Z\");\r",
															"\r",
															"pm.collectionVariables.set(\"dateFrom\", today);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&size=10&dateFrom={{dateFrom}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "dateFrom",
															"value": "{{dateFrom}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline OK Case Filter By DateTo (existing Date)",
									"item": [
										{
											"name": "GET Timeline - OK Filter By DateTo (existing Date)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var operationList = jsonResponse.operationList.length;\r",
															"\r",
															"if( pm.response.code != 200 || operationList < 5){\r",
															"  retryRequest(postman,pm,setTimeout,3000);\r",
															"}\r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline - Filter by DateTo - with a real date - expect res status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline - Filter by DateTo - with a real date - expect field operationList to have 5 events\", function () {\r",
															"    pm.expect(jsonResponse.operationList.length).equals(5);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"let todayP3 = String(moment().add(3,'months').format(\"yyyy-MM-DD\")).concat(\"T00%3A00%3A00Z\");\r",
															"\r",
															"pm.collectionVariables.set(\"dateTo\", todayP3);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&size=10&dateTo={{dateTo}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "dateTo",
															"value": "{{dateTo}}"
														},
														{
															"key": null,
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline OK Case Filter By Date From and DateTo (existing Dates)",
									"item": [
										{
											"name": "Get Timeline OK Case Filter By Date From and DateTo (existing Dates)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var operationList = jsonResponse.operationList.length;\r",
															"\r",
															"if( pm.response.code != 200 || operationList < 5){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"\r",
															"    pm.test(\"Timeline - Happy case - Get Timeline - Filter by DateFrom and DateTo - with a real date - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case - Get Timeline with filter by DateFrom and DateTo - with a real date - expect field operationList to have 5 events\", function () {\r",
															"        pm.expect(jsonResponse.operationList.length).equals(5);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&size=10&dateFrom={{dateFrom}}&dateTo={{dateTo}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "DELETE_INSTRUMENT",
															"disabled": true
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "dateFrom",
															"value": "{{dateFrom}}"
														},
														{
															"key": "dateTo",
															"value": "{{dateTo}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Unhappy Case",
					"item": [
						{
							"name": "Timeline Not Found for current user",
							"item": [
								{
									"name": "Generate Token IO Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 200){\r",
													"   retryRequest(postman,pm,setTimeout,5000);\r",
													"} else {\r",
													"    pm.test('Timeline - Happy case - Get Timeline empty list with not valid CF - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_FAKE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Timeline - [Unhappy] Without filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();\r",
													"\r",
													"if( pm.response.code != 404 || jsonResponse.code != \"TIMELINE_USER_NOT_FOUND\"){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"\r",
													"    pm.test(\"Timeline - Unhappy case - Get Timeline without filter - expect res status 404\", function () {\r",
													"        pm.response.to.have.status(404);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Timeline - Unhappy case - Get Timeline without filter  - expect code TIMELINE_USER_NOT_FOUND\", function () {\r",
													"        pm.expect(jsonResponse.code).equals(\"TIMELINE_USER_NOT_FOUND\");\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrlIdPay}}/{{initiativeId_discount}}/?page=0&size=10",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"{{initiativeId_discount}}",
												""
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Timeline Detail Not found",
							"item": [
								{
									"name": "GET Timeline Detail [Unhappy]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();\r",
													"\r",
													"if( pm.response.code != 404 || jsonResponse.code != \"TIMELINE_DETAIL_NOT_FOUND\"){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"\r",
													"    pm.test(\"Timeline Detail - Unhappy case - Get Timeline Detail- - expect res status 404\", function () {\r",
													"        pm.response.to.have.status(404);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Timeline Detail - Unhappy case - Get Timeline Detail - expect code TIMELINE_DETAIL_NOT_FOUND\", function () {\r",
													"        pm.expect(jsonResponse.code).equals('TIMELINE_DETAIL_NOT_FOUND');\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "GET",
										"header": [],
										"url": "{{baseUrlIdPay}}/{{initiativeId_discount}}/{{operationId}}"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Delete Initiative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Payment - Happy Case - Delete Initiative - Status test 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "QRCODE",
			"item": [
				{
					"name": "Happy Case",
					"item": [
						{
							"name": "Initiative creation",
							"item": [
								{
									"name": "ENTE - Initiative creation",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Payment - Happy case - IdpayCode - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrlIdPay}}/welfare/token/test"
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
															"const serviceName = 'Test funzionali App IO IdpayCode ' + now;\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP1 - Responses with 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP1 - Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrlIdPay}}/initiative/info",
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
															"\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"pm.collectionVariables.set('budget', 500);\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', false);\r",
															"pm.collectionVariables.set('rankingEnabled', false);\r",
															"pm.collectionVariables.set('beneficiaryBudget', 100);//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', today);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP2 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/initiative/:initiativeId/general",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"initiative",
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3-Update Initiative (criteria)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP3 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrlIdPay}}/initiative/{{initiativeId}}/beneficiary"
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if( pm.response.code != 204){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} \r",
															"\r",
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP4 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 50);\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxThresholdFrom', 50);\r",
															"pm.collectionVariables.set('trxThresholdTo', 80);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"initiativeRewardType\": \"DISCOUNT\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n      \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/initiative/:initiativeId/reward",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"initiative",
														":initiativeId",
														"reward"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP5-Update Initiative Refund Rule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP5 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\r\n     \"timeParameter\": {\r\n        \"timeType\": \"DAILY\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/initiative/:initiativeId/refund",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"initiative",
														":initiativeId",
														"refund"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PAGOPA - Initiative update status APPROVED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Payment - Happy case - IdpayCode - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrlIdPay}}/welfare/token/test"
											},
											"response": []
										},
										{
											"name": "Update initiative into APPROVED status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(function(){}, 20000); //milliseconds"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalTokenPagopa}}"
													}
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": "{{baseUrlIdPay}}/initiative/{{initiativeId}}/approved"
											},
											"response": []
										}
									]
								},
								{
									"name": "ENTE - Initiative PUBLISHED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Payment - Happy case - IdpayCode - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrlIdPay}}/welfare/token/test"
											},
											"response": []
										},
										{
											"name": "Initiative PUBLISHED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "PUT",
												"header": [],
												"url": "{{baseUrlIdPay}}/initiative/{{initiativeId}}/published"
											},
											"response": []
										}
									]
								},
								{
									"name": "Upload csv",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Payment - Happy case - IdpayCode - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrlIdPay}}/welfare/token/test"
											},
											"response": []
										},
										{
											"name": "Upload csv",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Payment - Happy case - IdpayCode - Upload csv - Response status is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Payment - Happy case - IdpayCode - Upload csv - Verify response body contains status: VALIDATED\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse.status).eql(\"VALIDATED\");\r",
															"    \r",
															"    pm.collectionVariables.set(\"dateFrom\", jsonResponse.elabTimeStamp);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "/C:/Progetti/PagoPa/IdPay/idpay-timeline/postman/example_merchant_valid.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/merchant/initiative/{{initiativeId}}/upload",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"merchant",
														"initiative",
														"{{initiativeId}}",
														"upload"
													],
													"query": [
														{
															"key": "",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Merchant list on initiative",
									"item": [
										{
											"name": "Get Merchant List",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response = pm.response.json().content[0];\r",
															"\r",
															"if( pm.response.code != 200 || response == undefined ){\r",
															"   retryRequest(postman,pm,setTimeout,5000);\r",
															"} else {\r",
															"\r",
															"    pm.test(\"Payment - Happy case - IdpayCode - Get merchant list - Response status is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Payment - Happy case - IdpayCode - Get merchant list - Verify response body contains merchantId,businessName,fiscalCode,merchantStatus,updateStatusDate\", function () {\r",
															"\r",
															"        pm.expect(response).have.property(\"merchantId\");\r",
															"        pm.expect(response).have.property(\"businessName\");\r",
															"        pm.expect(response).have.property(\"fiscalCode\");\r",
															"        pm.expect(response).have.property(\"merchantStatus\");\r",
															"        pm.expect(response).have.property(\"updateStatusDate\");\r",
															"\r",
															"        pm.collectionVariables.set(\"merchantId\", response.merchantId);\r",
															"        pm.collectionVariables.set(\"merchantFiscalCode\", response.fiscalCode);\r",
															"    });\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": "{{baseUrlIdPay}}/merchant/initiative/{{initiativeId}}/merchants"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Onboarding",
							"item": [
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 200){\r",
													"   retryRequest(postman,pm,setTimeout,5000);\r",
													"} else {\r",
													"\r",
													"    pm.test('Wallet - Happy case - Initiative discount - Onboarding - Generate Token IO', () => {\r",
													"        //verify response HTTP status \r",
													"        pm.response.to.have.status(200);\r",
													"        pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_fake}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 204){\r",
													"   retryRequest(postman,pm,setTimeout,5000);\r",
													"} \r",
													"\r",
													" \r",
													"pm.test(\"Wallet - Happy case - Initiative discount - Onboarding - Accept T&C - return status 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}/onboarding/"
									},
									"response": []
								},
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Wallet - Happy case - Initiative discount - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}/onboarding/initiative"
									},
									"response": []
								},
								{
									"name": "PDND + Autocertification",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Wallet - Happy case - Initiative discount - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}/onboarding/consent"
									},
									"response": []
								}
							]
						},
						{
							"name": "Create Transaction",
							"item": [
								{
									"name": "Generate Merchant Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {},90000)"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{merchantPortalToken}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}merchant/token/test"
									},
									"response": []
								},
								{
									"name": "[MERCHANT-PORTAL] Create Transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 201){\r",
													"   retryRequest(postman,pm,setTimeout,5000);\r",
													"  \r",
													"} else {\r",
													"    pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
													"        pm.response.to.have.status(201);\r",
													"    });\r",
													"    pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
													"        let jsonResponse = pm.response.json();\r",
													"        let trxCode = jsonResponse.trxCode;\r",
													"        pm.expect(jsonResponse).have.property(\"trxCode\");\r",
													"        pm.expect(jsonResponse.qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
													"        pm.expect(jsonResponse.qrcodeTxtUrl).equals(`https://continua.io.pagopa.it/idpay/auth/${trxCode}`);\r",
													"    });\r",
													"\r",
													"    pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
													"    pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
													"\r",
													"pm.collectionVariables.set(\"trxDate\", today);\r",
													"\r",
													"pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{merchantPortalToken}}"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"651713d5-d567-4993-882a-7e4e3e9e8f4c\",\r\n    \"amountCents\": \"7000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}merchant/portal/transactions"
									},
									"response": []
								},
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 200){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"\r",
													"    pm.test('Payment - Happy case - Onboarding - Generate Token IO', () => {\r",
													"        //verify response HTTP status \r",
													"        pm.response.to.have.status(200);\r",
													"        pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_fake}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Pre-Authorize Transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();\r",
													"\r",
													"if( pm.response.code != 200 || jsonResponse.status != \"IDENTIFIED\"){\r",
													"   retryRequest(postman,pm,setTimeout,5000);\r",
													"} else {\r",
													"    pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE]\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE] - Verify response status is IDENTIFIED and residualBudget is: (initiativeBudget-totalReward+reward)\", function () {\r",
													"        pm.expect(jsonResponse.status).to.eql(\"IDENTIFIED\");\r",
													"        pm.expect(jsonResponse.residualBudgetCents).to.eql(jsonResponse.counters.initiativeBudgetCents-jsonResponse.counters.totalRewardCents+jsonResponse.rewardCents);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrlIdPay}}/payment/qr-code/:trxCode/relate-user",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"payment",
												"qr-code",
												":trxCode",
												"relate-user"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Authorize Transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();\r",
													"\r",
													"if( pm.response.code != 200 || jsonResponse.status != \"AUTHORIZED\"){\r",
													"   retryRequest(postman,pm,setTimeout,5000);\r",
													"} else {\r",
													"\r",
													"    pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE]\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE] - Verify response status is AUTHORIZED and residualBudget is: initiativeBudget subtract totalReward\", function () {\r",
													"        pm.expect(jsonResponse.status).to.eql(\"AUTHORIZED\");\r",
													"        pm.expect(jsonResponse.residualBudgetCents).to.eql(jsonResponse.counters.initiativeBudgetCents-jsonResponse.counters.totalRewardCents);\r",
													"    });\r",
													"\r",
													"    pm.collectionVariables.set(\"effectiveAmountCents\", pm.response.json().amountCents);\r",
													"    pm.collectionVariables.set(\"rewardAmountCents\", pm.response.json().rewardCents);\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrlIdPay}}payment/qr-code/:trxCode/authorize",
											"host": [
												"{{baseUrlIdPay}}payment"
											],
											"path": [
												"qr-code",
												":trxCode",
												"authorize"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Merchant Transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 200 ){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"    pm.test(\"Payment - Happy case - Get merchant transactions list - Response status is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Payment - Happy case - Get merchant transactions list - checking effectiveAmountCents,rewardAmountCents,qrcodePngUrl and qrcodeTxtUrl values\", function () {\r",
													"        let jsonResponse = pm.response.json()\r",
													"        const effectiveAmountCents = pm.collectionVariables.get(\"effectiveAmountCents\");\r",
													"        const rewardAmountCents = pm.collectionVariables.get(\"rewardAmountCents\");\r",
													"        let trxCode = jsonResponse.content[0].trxCode;\r",
													"        pm.expect(jsonResponse.content[0].effectiveAmountCents).equals(parseInt(`${effectiveAmountCents}`));\r",
													"        pm.expect(jsonResponse.content[0].rewardAmountCents).equals(parseInt(`${rewardAmountCents}`));\r",
													"        pm.expect(jsonResponse.content[0].qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
													"        pm.expect(jsonResponse.content[0].qrcodeTxtUrl).equals(`https://continua.io.pagopa.it/idpay/auth/${trxCode}`);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{merchantPortalToken}}"
											}
										},
										"method": "GET",
										"header": [
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{baseUrlIdPay}}/merchant/portal/initiatives/{{initiativeId}}/transactions"
									},
									"response": []
								},
								{
									"name": "[ACQUIRER] Confirm Transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();\r",
													"\r",
													"if( pm.response.code != 200 || jsonResponse.status != \"REWARDED\"){\r",
													"   retryRequest(postman,pm,setTimeout,5000);\r",
													"} else {\r",
													"    pm.test(\"Payment - Happy case: [ACQUIRER] Confirm transaction [QR-CODE]\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Payment - Happy case: [ACQUIRER] Confirm transaction [QR-CODE] - Verify response status is REWARDED\", function () {\r",
													"        \r",
													"        pm.expect(jsonResponse.status).to.eql(\"REWARDED\");\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{merchantPortalToken}}"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text"
											},
											{
												"key": "x-acquirer-id",
												"value": "PAGOPA",
												"type": "text"
											}
										],
										"url": "{{baseUrlIdPay}}payment/{{transactionId}}/confirm"
									},
									"response": []
								}
							]
						},
						{
							"name": "Cancel transaction by merchant",
							"item": [
								{
									"name": "Generate Merchant Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 200){\r",
													"   retryRequest(postman,pm,setTimeout);\r",
													"} else {\r",
													"    let textResponse = pm.response.text()\r",
													"    pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
													"        //verify response HTTP status \r",
													"        pm.response.to.have.status(200);\r",
													"        pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}merchant/token/test"
									},
									"response": []
								},
								{
									"name": "[MERCHANT-PORTAL] Create Transaction",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
													"\r",
													"pm.collectionVariables.set(\"trxDate\", today);\r",
													"\r",
													"pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();\r",
													"\r",
													"if( pm.response.code != 201){\r",
													"   retryRequest(postman,pm,setTimeout,5000);\r",
													"} else {\r",
													"\r",
													"    pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
													"        pm.response.to.have.status(201);\r",
													"    });\r",
													"    pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
													"        let jsonResponse = pm.response.json();\r",
													"        let trxCode = jsonResponse.trxCode;\r",
													"        pm.expect(jsonResponse).have.property(\"trxCode\");\r",
													"        pm.expect(jsonResponse.qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
													"        pm.expect(jsonResponse.qrcodeTxtUrl).equals(`https://continua.io.pagopa.it/idpay/auth/${trxCode}`);\r",
													"    });\r",
													"\r",
													"    pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
													"    pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{merchantPortalToken}}"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"idTrxAcquirer\": \"{{idTrxAcquirer}}\",\r\n    \"amountCents\": \"7000\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}merchant/portal/transactions"
									},
									"response": []
								},
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 200){\r",
													"   retryRequest(postman,pm,setTimeout);\r",
													"} else {\r",
													"\r",
													"    pm.test('Payment - Happy case - Onboarding - Generate Token IO', () => {\r",
													"        //verify response HTTP status \r",
													"        pm.response.to.have.status(200);\r",
													"        pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_fake}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Pre-Authorize Transaction",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();\r",
													"\r",
													"if( pm.response.code != 200 || jsonResponse.status != \"IDENTIFIED\"){\r",
													"   retryRequest(postman,pm,setTimeout,5000);\r",
													"} else {\r",
													"\r",
													"    pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE]\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE] - Verify response status is IDENTIFIED and residualBudget is: (initiativeBudget-totalReward+reward)\", function () {\r",
													"        pm.expect(jsonResponse.status).to.eql(\"IDENTIFIED\");\r",
													"        pm.expect(jsonResponse.residualBudgetCents).to.eql(jsonResponse.counters.initiativeBudgetCents-jsonResponse.counters.totalRewardCents+jsonResponse.rewardCents);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrlIdPay}}payment/qr-code/:trxCode/relate-user",
											"host": [
												"{{baseUrlIdPay}}payment"
											],
											"path": [
												"qr-code",
												":trxCode",
												"relate-user"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Authorize Transaction",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();\r",
													"\r",
													"if( pm.response.code != 200 || jsonResponse.status != \"AUTHORIZED\"){\r",
													"   retryRequest(postman,pm,setTimeout,5000);\r",
													"} else {\r",
													"\r",
													"    pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE]\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE] - Verify response status is AUTHORIZED and residualBudget is: initiativeBudget subtract totalReward\", function () {\r",
													"        let jsonResponse = pm.response.json();\r",
													"        pm.expect(jsonResponse.status).to.eql(\"AUTHORIZED\");\r",
													"        pm.expect(jsonResponse.residualBudgetCents).to.eql(jsonResponse.counters.initiativeBudgetCents-jsonResponse.counters.totalRewardCents);\r",
													"    });\r",
													"\r",
													"    pm.collectionVariables.set(\"effectiveAmountCents\", pm.response.json().amountCents);\r",
													"    pm.collectionVariables.set(\"rewardAmountCents\", pm.response.json().rewardCents);\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrlIdPay}}payment/qr-code/:trxCode/authorize",
											"host": [
												"{{baseUrlIdPay}}payment"
											],
											"path": [
												"qr-code",
												":trxCode",
												"authorize"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[IO] Cancel transaction by merchant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 200 ){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"    pm.test(\"Payment - Happy case: Cancel transaction by citizen - [IO] Cancel transaction\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{merchantPortalToken}}"
											}
										},
										"method": "DELETE",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrlIdPay}}merchant/portal/transactions/:transactionId",
											"host": [
												"{{baseUrlIdPay}}merchant"
											],
											"path": [
												"portal",
												"transactions",
												":transactionId"
											],
											"variable": [
												{
													"key": "transactionId",
													"value": "{{transactionId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Merchant Transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();\r",
													"\r",
													"if( pm.response.code != 200 || jsonResponse.content.length != 0){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} \r",
													"\r",
													"pm.test(\"Payment - Happy case - Get merchant transactions list - Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Payment - Happy case - Get merchant transactions list - checking response is an empty list\", function () {\r",
													"    pm.expect(jsonResponse.content.length).equals(0);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{merchantPortalToken}}"
											}
										},
										"method": "GET",
										"header": [
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{baseUrlIdPay}}/merchant/portal/initiatives/{{initiativeId}}/transactions"
									},
									"response": []
								}
							]
						},
						{
							"name": "User suspend",
							"item": [
								{
									"name": "Suspend User Discount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 204){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} \r",
													"\r",
													"pm.test('Payment - [QRCODE] - SUSPENDED user - Suspend user', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{identityPortalToken}}"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Fiscal-Code",
												"value": "{{CF_fake}}",
												"type": "text"
											}
										],
										"url": "{{baseUrlIdPay}}/initiative/{{initiativeId}}/beneficiary/suspend"
									},
									"response": []
								}
							]
						},
						{
							"name": "User readmitted",
							"item": [
								{
									"name": "readmit User Discount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 204){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} \r",
													"\r",
													"pm.test('Payment - [QRCODE] - READMIT user', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{identityPortalToken}}"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Fiscal-Code",
												"value": "{{CF_fake}}",
												"type": "text"
											}
										],
										"url": "{{baseUrlIdPay}}/initiative/{{initiativeId}}/beneficiary/readmit"
									},
									"response": []
								}
							]
						},
						{
							"name": "User unsubscribed",
							"item": [
								{
									"name": "Unsubscribe - Ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 204){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} \r",
													"\r",
													"pm.test(\"Payment - [QRCODE] -  UNSUBSCRIBED user - Unsubscribe - Response status is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}wallet/{{initiativeId}}/unsubscribe"
									},
									"response": []
								}
							]
						},
						{
							"name": "GET Timeline",
							"item": [
								{
									"name": "Get Timeline OK Case Without filter",
									"item": [
										{
											"name": "GET Timeline - OK Without filter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var operationList = jsonResponse.operationList.length;\r",
															"\r",
															"if( pm.response.code != 200 || operationList < 7){\r",
															"   retryRequest(postman,pm,setTimeout,5000);\r",
															"} else {\r",
															"    pm.test(\"Timeline - Happy case[QRCODE] - Get Timeline without filter - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case[QRCODE] - Get Timeline without filter  - expect operation list to have all element\", function () {\r",
															"        pm.expect(jsonResponse.operationList.length).equals(7);\r",
															"    });\r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline && Detail OK Case Filter By Event ONBOARDING",
									"item": [
										{
											"name": "GET Timeline - OK Filter By Event ONBOARDING",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationList[0].operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"ONBOARDING\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline - Happy case [QRCODE] - Get Timeline with filter by event: ONBOARDING - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case [QRCODE] - Get Timeline with filter by event: ONBOARDING - expect operation list to have one element and  operationType field in response to be equal: ONBOARDING\", function () {\r",
															"        let jsonResponse = pm.response.json()\r",
															"        pm.expect(jsonResponse.operationList.length).equals(1);\r",
															"        pm.expect(jsonResponse.operationList[0].operationType).equals('ONBOARDING');\r",
															"        pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&operationType=ONBOARDING&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "ONBOARDING"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Timeline Detail ONBOARDING",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"ONBOARDING\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline Detail - Happy case [QRCODE] - Get Timeline Detail- Filter by operationType ONBOARDING- expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline Detail - Happy case [QRCODE] - Get Timeline Detail- Filter by operationType ONBOARDING - expect operationType ONBOARDING\", function () {\r",
															"        pm.expect(jsonResponse.operationType).equals('ONBOARDING');\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": "{{baseUrlIdPay}}/{{initiativeId}}/{{operationId}}"
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline && Detail OK Case Filter By Event TRANSACTION",
									"item": [
										{
											"name": "GET Timeline - OK Filter By Event TRANSACTION",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationList[0].operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"TRANSACTION\" ){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline - Happy case [QRCODE] - Get Timeline with filter by event: TRANSACTION - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case [QRCODE] - Get Timeline with filter by event: TRANSACTION- expect operation list to have one element and  operationType field in response to be equal: TRANSACTION\", function () {\r",
															"        pm.expect(jsonResponse.operationList.length).equals(3);\r",
															"        pm.expect(jsonResponse.operationList[0].operationType).equals('TRANSACTION');\r",
															"        pm.expect(jsonResponse.operationList[0].channel).equals('QRCODE');\r",
															"        pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&operationType=TRANSACTION&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "TRANSACTION"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Timeline Detail TRANSACTION",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"TRANSACTION\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"\r",
															"    pm.test(\"Timeline Detail - Happy case [QRCODE] - Get Timeline Detail- Filter by operationType TRANSACTION- expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline Detail - Happy case [QRCODE] - Get Timeline Detail- Filter by operationType TRANSACTION - expect operationType TRANSACTION\", function () {\r",
															"        pm.expect(jsonResponse.operationType).equals('TRANSACTION');\r",
															"        pm.expect(jsonResponse.channel).equals('QRCODE');\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/{{operationId}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														"{{operationId}}"
													],
													"query": [
														{
															"key": "operationType",
															"value": "TRANSACTION",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline && Detail OK Case Filter By Event User SUSPENDED",
									"item": [
										{
											"name": "GET Timeline - OK Filter By Event user SUSPENDED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationList[0].operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"SUSPENDED\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline - Happy case [QRCODE] - Get Timeline with filter by event: SUSPENDED - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case [QRCODE] - Get Timeline with filter by event: SUSPENDED - expect operation list to have one element and  operationType field in response to be equal: SUSPENDED\", function () {\r",
															"        pm.expect(jsonResponse.operationList.length).equals(1);\r",
															"        pm.expect(jsonResponse.operationList[0].operationType).equals('SUSPENDED');\r",
															"        pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&operationType=SUSPENDED&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "SUSPENDED"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Timeline Detail SUSPENDED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"SUSPENDED\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline Detail - Happy case [QRCODE]- Get Timeline Detail- Filter by operationType SUSPENDED - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline Detail - Happy case [QRCODE] - Get Timeline Detail- Filter by operationType SUSPENDED - expect operationType SUSPENDED\", function () {\r",
															"    pm.expect(jsonResponse.operationType).equals('SUSPENDED');\r",
															"    }); \r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/{{operationId}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														"{{operationId}}"
													],
													"query": [
														{
															"key": "operationType",
															"value": "TRANSACTION",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline && Detail OK Case Filter By Event User READMITTED",
									"item": [
										{
											"name": "GET Timeline - OK Filter By Event user READMITTED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationList[0].operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"READMITTED\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline - Happy case [QRCODE] - Get Timeline with filter by event: READMITTED - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case [QRCODE] - Get Timeline with filter by event: READMITTED - expect operation list to have one element and  operationType field in response to be equal: READMITTED\", function () {\r",
															"        pm.expect(jsonResponse.operationList.length).equals(1);\r",
															"        pm.expect(jsonResponse.operationList[0].operationType).equals('READMITTED');\r",
															"        pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&operationType=READMITTED&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "READMITTED"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Timeline Detail READMITTED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"READMITTED\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline Detail - Happy case [QRCODE] - Get Timeline Detail- Filter by operationType READMITTED - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline Detail - Happy case [QRCODE] - Get Timeline Detail- Filter by operationType READMITTED - expect operationType READMITTED\", function () {\r",
															"        pm.expect(jsonResponse.operationType).equals('READMITTED');\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/{{operationId}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														"{{operationId}}"
													],
													"query": [
														{
															"key": "operationType",
															"value": "TRANSACTION",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline && Detail OK Case Filter By Event User UNSUBSCRIBED",
									"item": [
										{
											"name": "GET Timeline - OK Filter By Event user UNSUBSCRIBED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationList[0].operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"UNSUBSCRIBED\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline - Happy case [QRCODE] - Get Timeline with filter by event: UNSUBSCRIBED - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case [QRCODE] - Get Timeline with filter by event: UNSUBSCRIBED - expect operation list to have one element and  operationType field in response to be equal:UNSUBSCRIBED\", function () {\r",
															"        pm.expect(jsonResponse.operationList.length).equals(1);\r",
															"        pm.expect(jsonResponse.operationList[0].operationType).equals('UNSUBSCRIBED');\r",
															"        pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&operationType=UNSUBSCRIBED&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "UNSUBSCRIBED"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Timeline Detail UNSUBSCRIBED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"UNSUBSCRIBED\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline Detail - Happy case [QRCODE] - Get Timeline Detail- Filter by operationType UNSUBSCRIBED - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline Detail - Happy case [QRCODE] - Get Timeline Detail- Filter by operationType UNSUBSCRIBED - expect operationType UNSUBSCRIBED\", function () {\r",
															"        pm.expect(jsonResponse.operationType).equals('UNSUBSCRIBED');\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/{{operationId}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														"{{operationId}}"
													],
													"query": [
														{
															"key": "operationType",
															"value": "TRANSACTION",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline OK Case Filter By DateFrom (existing Date)",
									"item": [
										{
											"name": "GET Timeline - OK Filter By DateFrom (existing Date)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var operationList = jsonResponse.operationList.length;\r",
															"\r",
															"if( pm.response.code != 200 || operationList < 7){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline - Happy case [QRCODE] - Get Timeline with filter by DateFrom - with a real date - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case [QRCODE] - Get Timeline with filter by DateFrom - expect field operationList to have 7 events that have date from the filter\", function () {\r",
															"        pm.expect(jsonResponse.operationList.length).equals(7);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"let today = String(moment().format(\"yyyy-MM-DD\")).concat(\"T00%3A00%3A00Z\");\r",
															"\r",
															"pm.collectionVariables.set(\"dateFrom\", today);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&size=10&dateFrom={{dateFrom}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "dateFrom",
															"value": "{{dateFrom}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline OK Case Filter By DateTo (existing Date)",
									"item": [
										{
											"name": "GET Timeline - OK Filter By DateTo (existing Date)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var operationList = jsonResponse.operationList.length;\r",
															"\r",
															"if( pm.response.code != 200 || operationList < 7){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline - Happy case [QRCODE] - Get Timeline - Filter by DateTo - with a real date - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case [QRCODE] - Get Timeline - Filter by DateTo - with a real date - expect field operationList to have 7 events\", function () {\r",
															"        pm.expect(jsonResponse.operationList.length).equals(7);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"let todayP3 = String(moment().add(3,'months').format(\"yyyy-MM-DD\")).concat(\"T00%3A00%3A00Z\");\r",
															"\r",
															"pm.collectionVariables.set(\"dateTo\", todayP3);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&size=10&dateTo={{dateTo}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "dateTo",
															"value": "{{dateTo}}"
														},
														{
															"key": null,
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline OK Case Filter By Date From and DateTo (existing Dates)",
									"item": [
										{
											"name": "Get Timeline OK Case Filter By Date From and DateTo (existing Dates)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var operationList = jsonResponse.operationList.length;\r",
															"\r",
															"if( pm.response.code != 200 || operationList < 7){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline - Happy case - Get Timeline - Filter by DateFrom and DateTo - with a real date - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case - Get Timeline with filter by DateFrom and DateTo - with a real date - expect field operationList to have 7 events\", function () {\r",
															"        pm.expect(jsonResponse.operationList.length).equals(7);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&size=10&dateFrom={{dateFrom}}&dateTo={{dateTo}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "DELETE_INSTRUMENT",
															"disabled": true
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "dateFrom",
															"value": "{{dateFrom}}"
														},
														{
															"key": "dateTo",
															"value": "{{dateTo}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Unhappy Case",
					"item": [
						{
							"name": "Timeline Not Found for current user",
							"item": [
								{
									"name": "Generate Token IO Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 200){\r",
													"   retryRequest(postman,pm,setTimeout,5000);\r",
													"} else {\r",
													"    pm.test('Timeline - Happy case - Get Timeline empty list with not valid CF - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_FAKE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Timeline - [Unhappy] Without filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();\r",
													"\r",
													"if( pm.response.code != 404 || jsonResponse.code != \"TIMELINE_USER_NOT_FOUND\"){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"\r",
													"    pm.test(\"Timeline - Unhappy case - Get Timeline without filter - expect res status 404\", function () {\r",
													"        pm.response.to.have.status(404);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Timeline - Unhappy case - Get Timeline without filter  - expect code TIMELINE_USER_NOT_FOUND\", function () {\r",
													"        pm.expect(jsonResponse.code).equals(\"TIMELINE_USER_NOT_FOUND\");\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrlIdPay}}/{{initiativeId_discount}}/?page=0&size=10",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"{{initiativeId_discount}}",
												""
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Timeline Detail Not found",
							"item": [
								{
									"name": "GET Timeline Detail [Unhappy]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();\r",
													"\r",
													"if( pm.response.code != 404 || jsonResponse.code != \"TIMELINE_DETAIL_NOT_FOUND\"){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"\r",
													"    pm.test(\"Timeline Detail - Unhappy case - Get Timeline Detail- - expect res status 404\", function () {\r",
													"        pm.response.to.have.status(404);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Timeline Detail - Unhappy case - Get Timeline Detail - expect code TIMELINE_DETAIL_NOT_FOUND\", function () {\r",
													"        pm.expect(jsonResponse.code).equals('TIMELINE_DETAIL_NOT_FOUND');\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "GET",
										"header": [],
										"url": "{{baseUrlIdPay}}/{{initiativeId_discount}}/{{operationId}}"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Delete Initiative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Payment - Happy Case - Delete Initiative - Status test 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "BarCode",
			"item": [
				{
					"name": "Initiative creation",
					"item": [
						{
							"name": "ENTE - Initiative creation",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Happy case - IdpayCode - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}/welfare/token/test"
									},
									"response": []
								},
								{
									"name": "STEP1-Insert Initiative (Service Info)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
													"const serviceName = 'Test funzionali App IO IdpayCode ' + now;\r",
													"pm.collectionVariables.set('serviceName', serviceName);\r",
													"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
													"\r",
													"pm.collectionVariables.set('channel_type', 'web');\r",
													"pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"// console.log('jsondata', jsonData);\r",
													"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
													"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
													"\r",
													"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP1 - Responses with 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP1 - Verify response body\", function () {\r",
													"    let jsonResponse = pm.response.json();\r",
													"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{identityPortalToken}}"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}/initiative/info",
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								},
								{
									"name": "STEP2-Update Initiative (general Info)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"//Format: YYYY-MM-DD\r",
													"let today = String(moment().format('YYYY-MM-DD'));\r",
													"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
													"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
													"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
													"\r",
													"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
													"\r",
													"\r",
													"/*\r",
													"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
													"pm.collectionVariables.set('...', _.random(0, 180));\r",
													"*/\r",
													"//_.floor(_.random(1.0, 100000.0, true),2)\r",
													"pm.collectionVariables.set('budget', 500);\r",
													"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
													"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
													"pm.collectionVariables.set('beneficiaryKnown', false);\r",
													"pm.collectionVariables.set('rankingEnabled', false);\r",
													"pm.collectionVariables.set('beneficiaryBudget', 100);//default max 1000\r",
													"pm.collectionVariables.set('rankingStartDate', today);\r",
													"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
													"pm.collectionVariables.set('startDate', today);\r",
													"pm.collectionVariables.set('endDate', todayP3);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP2 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{identityPortalToken}}"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlIdPay}}/initiative/:initiativeId/general",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"initiative",
												":initiativeId",
												"general"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}"
												}
											]
										},
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								},
								{
									"name": "STEP3-Update Initiative (criteria)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP3 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{identityPortalToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}/initiative/{{initiativeId}}/beneficiary"
									},
									"response": []
								},
								{
									"name": "STEP4-Update Initiative Trx-Reward rules",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 204){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} \r",
													"\r",
													"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP4 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const d = new Date();\r",
													"dateString = d.toISOString()\r",
													"let endTime = dateString.split('T');\r",
													"endTime = endTime[1].split('Z');\r",
													"\r",
													"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
													"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
													"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
													"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
													"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
													"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
													"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
													"} else {\r",
													"    pm.collectionVariables.set('rewardRuleValue', 50);\r",
													"}\r",
													"\r",
													"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
													"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
													"pm.collectionVariables.set('trxThresholdFrom', 50);\r",
													"pm.collectionVariables.set('trxThresholdTo', 80);\r",
													"pm.collectionVariables.set('trxCountFrom', 3);\r",
													"pm.collectionVariables.set('trxCountTo', 11);\r",
													"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
													"pm.collectionVariables.set('trxRewardLimitValue', 3);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{identityPortalToken}}"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"initiativeRewardType\": \"DISCOUNT\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n      \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlIdPay}}/initiative/:initiativeId/reward",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"initiative",
												":initiativeId",
												"reward"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP5-Update Initiative Refund Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP5 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{identityPortalToken}}"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n     \"timeParameter\": {\r\n        \"timeType\": \"DAILY\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlIdPay}}/initiative/:initiativeId/refund",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"initiative",
												":initiativeId",
												"refund"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PAGOPA - Initiative update status APPROVED",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Happy case - IdpayCode - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}/welfare/token/test"
									},
									"response": []
								},
								{
									"name": "Update initiative into APPROVED status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Happy case - IdpayCode - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//setTimeout(function(){}, 20000); //milliseconds"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{identityPortalTokenPagopa}}"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": "{{baseUrlIdPay}}/initiative/{{initiativeId}}/approved"
									},
									"response": []
								}
							]
						},
						{
							"name": "ENTE - Initiative PUBLISHED",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Happy case - IdpayCode - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}/welfare/token/test"
									},
									"response": []
								},
								{
									"name": "Initiative PUBLISHED",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Happy case - IdpayCode - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{identityPortalToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"url": "{{baseUrlIdPay}}/initiative/{{initiativeId}}/published"
									},
									"response": []
								}
							]
						},
						{
							"name": "Upload csv",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Payment - Happy case - IdpayCode - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}/welfare/token/test"
									},
									"response": []
								},
								{
									"name": "Upload csv",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Payment - Happy case - IdpayCode - Upload csv - Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Payment - Happy case - IdpayCode - Upload csv - Verify response body contains status: VALIDATED\", function () {\r",
													"    let jsonResponse = pm.response.json();\r",
													"    pm.expect(jsonResponse.status).eql(\"VALIDATED\");\r",
													"    \r",
													"    pm.collectionVariables.set(\"dateFrom\", jsonResponse.elabTimeStamp);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{identityPortalToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "./postman/example_merchant_valid.csv"
												}
											]
										},
										"url": {
											"raw": "{{baseUrlIdPay}}/merchant/initiative/{{initiativeId}}/upload",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"merchant",
												"initiative",
												"{{initiativeId}}",
												"upload"
											],
											"query": [
												{
													"key": "",
													"value": null,
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Merchant list on initiative",
							"item": [
								{
									"name": "Get Merchant List",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonResponse = pm.response.json().content[0];\r",
													"\r",
													"if( pm.response.code != 200 || jsonResponse == undefined ){\r",
													"   retryRequest(postman,pm,setTimeout,5000);\r",
													"}else{\r",
													"\r",
													"pm.test(\"Payment - Happy case - IdpayCode - Get merchant list - Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Payment - Happy case - IdpayCode - Get merchant list - Verify response body contains merchantId,businessName,fiscalCode,merchantStatus,updateStatusDate\", function () {\r",
													"\r",
													"    pm.expect(jsonResponse).have.property(\"merchantId\");\r",
													"    pm.expect(jsonResponse).have.property(\"businessName\");\r",
													"    pm.expect(jsonResponse).have.property(\"fiscalCode\");\r",
													"    pm.expect(jsonResponse).have.property(\"merchantStatus\");\r",
													"    pm.expect(jsonResponse).have.property(\"updateStatusDate\");\r",
													"\r",
													"    pm.collectionVariables.set(\"merchantId\", jsonResponse.merchantId);\r",
													"    pm.collectionVariables.set(\"merchantFiscalCode\", jsonResponse.fiscalCode);\r",
													"});\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{identityPortalToken}}"
											}
										},
										"method": "GET",
										"header": [],
										"url": "{{baseUrlIdPay}}/merchant/initiative/{{initiativeId}}/merchants"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Onboarding",
					"item": [
						{
							"name": "Generate Token IO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if( pm.response.code != 200){\r",
											"   retryRequest(postman,pm,setTimeout,5000);\r",
											"} else{\r",
											"    pm.test('Wallet - Happy case - Initiative discount - Onboarding - Generate Token IO', () => {\r",
											"        //verify response HTTP status \r",
											"        pm.response.to.have.status(200);\r",
											"        pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Subscription-Key",
										"value": "{{genericSubscriptionKey}}",
										"type": "default"
									},
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "default"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rtd",
										"mock-io",
										"login"
									],
									"query": [
										{
											"key": "fiscalCode",
											"value": "{{CF_fake}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Accept T&C",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if( pm.response.code != 204){\r",
											"   retryRequest(postman,pm,setTimeout,5000);\r",
											"} \r",
											"\r",
											" \r",
											"pm.test(\"Wallet - Happy case - Initiative discount - Onboarding - Accept T&C - return status 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{tokenIO}}"
									}
								},
								"method": "PUT",
								"header": [
									{
										"key": "Ocp-Apim-Subscription-Key",
										"value": "{{apimSubscriptionKey}}",
										"type": "text"
									},
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrlIdPay}}/onboarding/"
							},
							"response": []
						},
						{
							"name": "Prerequisites Check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Wallet - Happy case - Initiative discount - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{tokenIO}}"
									}
								},
								"method": "PUT",
								"header": [
									{
										"key": "Ocp-Apim-Subscription-Key",
										"value": "{{apimSubscriptionKey}}",
										"type": "text"
									},
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrlIdPay}}/onboarding/initiative"
							},
							"response": []
						},
						{
							"name": "PDND + Autocertification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Wallet - Happy case - Initiative discount - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{tokenIO}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrlIdPay}}/onboarding/consent"
							},
							"response": []
						}
					]
				},
				{
					"name": "Happy Case",
					"item": [
						{
							"name": "Create Transaction",
							"item": [
								{
									"name": "[User] Create Transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();\r",
													" \r",
													"if( pm.response.code != 201 || jsonResponse.status != \"CREATED\"){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"\r",
													"    pm.test(\"Payment - Happy case: [USER] Create transaction [BARCODE]\", function () {\r",
													"        pm.response.to.have.status(201);\r",
													"    });\r",
													"    pm.test(\"Payment - Happy case: [USER] Create transaction [BARCODE] - Verify response body contains fields\", function () {\r",
													"        let trxCode = jsonResponse.trxCode;\r",
													"        pm.expect(jsonResponse).have.property(\"trxCode\");\r",
													"        pm.expect(jsonResponse.status).equals(\"CREATED\");\r",
													"    });\r",
													"\r",
													"    pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
													"\r",
													"pm.collectionVariables.set(\"trxDate\", today);\r",
													"\r",
													"pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}/payment/bar-code"
									},
									"response": []
								},
								{
									"name": "Generate Merchant Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {},90000)"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"pm.test('Payment - Happy case - BarCode - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"3a602b17-ac1c-3029-9e78-0a4bbb8693d4\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}/merchant/token/test"
									},
									"response": []
								},
								{
									"name": "[IO] Authorize Transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();\r",
													"\r",
													"if( pm.response.code != 200 || jsonResponse.status != \"AUTHORIZED\"){\r",
													"   retryRequest(postman,pm,setTimeout,5000);\r",
													"} else {\r",
													"\r",
													"    pm.test(\"Payment - Happy case: [IO] Authorize transaction [BARCODE]\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Payment - Happy case: [IO] Authorize transaction [BARCODE] - Verify response status is AUTHORIZED and residualBudget is: initiativeBudget subtract totalReward\", function () {\r",
													"        pm.expect(jsonResponse.status).to.eql(\"AUTHORIZED\");\r",
													"        pm.expect(jsonResponse.residualBudgetCents).to.eql(jsonResponse.counters.initiativeBudgetCents-jsonResponse.counters.totalRewardCents);\r",
													"    });\r",
													"\r",
													"    pm.collectionVariables.set(\"effectiveAmountCents\", pm.response.json().amountCents);\r",
													"    pm.collectionVariables.set(\"rewardAmountCents\", pm.response.json().rewardCents);\r",
													"    pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{merchantPortalToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"amountCents\" : \"5000\",\r\n    \"idTrxAcquirer\": \"PAGOPA\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlIdPay}}/merchant/portal/transactions/bar-code/:trxCode/authorize",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"merchant",
												"portal",
												"transactions",
												"bar-code",
												":trxCode",
												"authorize"
											],
											"variable": [
												{
													"key": "trxCode",
													"value": "{{trxCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Merchant Transactions Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();\r",
													"\r",
													"if( pm.response.code != 200 || jsonResponse.content[0].status != \"AUTHORIZED\"){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"    pm.test(\"Payment - Happy case - Get merchant transactions list - Response status is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Payment - Happy case - Get merchant transactions list - checking effectiveAmountCents, rewardAmountCents and status values\", function () {\r",
													"        const effectiveAmountCents = pm.collectionVariables.get(\"effectiveAmountCents\");\r",
													"        const rewardAmountCents = pm.collectionVariables.get(\"rewardAmountCents\");\r",
													"        let trxCode = jsonResponse.content[0].trxCode;\r",
													"        pm.expect(jsonResponse.content[0].effectiveAmountCents).equals(parseInt(`${effectiveAmountCents}`));\r",
													"        pm.expect(jsonResponse.content[0].rewardAmountCents).equals(parseInt(`${rewardAmountCents}`));\r",
													"        pm.expect(jsonResponse.content[0].status).equals(\"AUTHORIZED\");\r",
													"});\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{merchantPortalToken}}"
											}
										},
										"method": "GET",
										"header": [
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text"
											}
										],
										"url": "{{baseUrlIdPay}}/merchant/portal/initiatives/{{initiativeId}}/transactions"
									},
									"response": []
								},
								{
									"name": "[ACQUIRER] Confirm Transaction Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();\r",
													"\r",
													"if( pm.response.code != 200 || jsonResponse.status != \"REWARDED\"){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"    pm.test(\"Payment - Happy case: [ACQUIRER] Confirm transaction [BARCODE]\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Payment - Happy case: [ACQUIRER] Confirm transaction [BARCODE] - Verify response status is REWARDED\", function () {\r",
													"        pm.expect(jsonResponse.status).to.eql(\"REWARDED\");\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "x-merchant-id",
												"value": "{{merchantId}}",
												"type": "text"
											},
											{
												"key": "x-acquirer-id",
												"value": "PAGOPA",
												"type": "text"
											}
										],
										"url": "{{paymentServerUrl}}/idpay/payment/{{transactionId}}/confirm"
									},
									"response": []
								}
							]
						},
						{
							"name": "User suspend",
							"item": [
								{
									"name": "Suspend User Discount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 204){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"\r",
													"    pm.test('Payment - [BARCODE] - SUSPENDED user - Suspend user', () => {\r",
													"        //verify response HTTP status \r",
													"        pm.response.to.have.status(204);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{identityPortalToken}}"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Fiscal-Code",
												"value": "{{CF_fake}}",
												"type": "text"
											}
										],
										"url": "{{baseUrlIdPay}}/initiative/{{initiativeId}}/beneficiary/suspend"
									},
									"response": []
								}
							]
						},
						{
							"name": "User readmitted",
							"item": [
								{
									"name": "readmit User Discount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 204){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"\r",
													"    pm.test('Payment - [BARCODE] - READMIT user', () => {\r",
													"        //verify response HTTP status \r",
													"        pm.response.to.have.status(204);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{identityPortalToken}}"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Fiscal-Code",
												"value": "{{CF_fake}}",
												"type": "text"
											}
										],
										"url": "{{baseUrlIdPay}}/initiative/{{initiativeId}}/beneficiary/readmit"
									},
									"response": []
								}
							]
						},
						{
							"name": "User unsubscribed",
							"item": [
								{
									"name": "Unsubscribe - Ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 204){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"\r",
													"    pm.test(\"Payment - [BARCODE] -  UNSUBSCRIBED user - Unsubscribe - Response status is 204\", function () {\r",
													"        pm.response.to.have.status(204);\r",
													"    });\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}wallet/{{initiativeId}}/unsubscribe"
									},
									"response": []
								}
							]
						},
						{
							"name": "GET Timeline",
							"item": [
								{
									"name": "Get Timeline OK Case Without filter",
									"item": [
										{
											"name": "GET Timeline - OK Without filter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var operationList = jsonResponse.operationList.length;\r",
															"\r",
															"if( pm.response.code != 200 || operationList < 5){\r",
															"   retryRequest(postman,pm,setTimeout,5000);\r",
															"} else {\r",
															"    pm.test(\"Timeline - Happy case[BARCODE] - Get Timeline without filter - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case[BARCODE] - Get Timeline without filter  - expect operation list to have all element\", function () {\r",
															"        pm.expect(jsonResponse.operationList.length).equals(5);\r",
															"    });\r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline && Detail OK Case Filter By Event ONBOARDING",
									"item": [
										{
											"name": "GET Timeline - OK Filter By Event ONBOARDING",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationList[0].operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"ONBOARDING\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline - Happy case [BARCODE] - Get Timeline with filter by event: ONBOARDING - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case [BARCODE] - Get Timeline with filter by event: ONBOARDING - expect operation list to have one element and  operationType field in response to be equal: ONBOARDING\", function () {\r",
															"        let jsonResponse = pm.response.json()\r",
															"        pm.expect(jsonResponse.operationList.length).equals(1);\r",
															"        pm.expect(jsonResponse.operationList[0].operationType).equals('ONBOARDING');\r",
															"        pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&operationType=ONBOARDING&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "ONBOARDING"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Timeline Detail ONBOARDING",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"ONBOARDING\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline Detail - Happy case [BARCODE] - Get Timeline Detail- Filter by operationType ONBOARDING- expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline Detail - Happy case [BARCODE] - Get Timeline Detail- Filter by operationType ONBOARDING - expect operationType ONBOARDING\", function () {\r",
															"        pm.expect(jsonResponse.operationType).equals('ONBOARDING');\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": "{{baseUrlIdPay}}/{{initiativeId}}/{{operationId}}"
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline && Detail OK Case Filter By Event TRANSACTION",
									"item": [
										{
											"name": "GET Timeline - OK Filter By Event TRANSACTION",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationList[0].operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"TRANSACTION\" ){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline - Happy case [BARCODE] - Get Timeline with filter by event: TRANSACTION - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case [BARCODE] - Get Timeline with filter by event: TRANSACTION- expect operation list to have one element and  operationType field in response to be equal: TRANSACTION\", function () {\r",
															"        pm.expect(jsonResponse.operationList.length).equals(1);\r",
															"        pm.expect(jsonResponse.operationList[0].operationType).equals('TRANSACTION');\r",
															"        pm.expect(jsonResponse.operationList[0].channel).equals('BARCODE');\r",
															"        pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&operationType=TRANSACTION&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "TRANSACTION"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Timeline Detail TRANSACTION",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"TRANSACTION\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"\r",
															"    pm.test(\"Timeline Detail - Happy case [BARCODE] - Get Timeline Detail- Filter by operationType TRANSACTION- expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline Detail - Happy case [BARCODE]- Get Timeline Detail- Filter by operationType TRANSACTION - expect operationType TRANSACTION\", function () {\r",
															"        pm.expect(jsonResponse.operationType).equals('TRANSACTION');\r",
															"        pm.expect(jsonResponse.channel).equals('BARCODE');\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/{{operationId}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														"{{operationId}}"
													],
													"query": [
														{
															"key": "operationType",
															"value": "TRANSACTION",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline && Detail OK Case Filter By Event User SUSPENDED",
									"item": [
										{
											"name": "GET Timeline - OK Filter By Event user SUSPENDED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationList[0].operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"SUSPENDED\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline - Happy case [BARCODE] - Get Timeline with filter by event: SUSPENDED - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case [BARCODE] - Get Timeline with filter by event: SUSPENDED - expect operation list to have one element and  operationType field in response to be equal: SUSPENDED\", function () {\r",
															"        pm.expect(jsonResponse.operationList.length).equals(1);\r",
															"        pm.expect(jsonResponse.operationList[0].operationType).equals('SUSPENDED');\r",
															"        pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&operationType=SUSPENDED&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "SUSPENDED"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Timeline Detail SUSPENDED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"SUSPENDED\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline Detail - Happy case [BARCODE]- Get Timeline Detail- Filter by operationType SUSPENDED - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline Detail - Happy case [BARCODE] - Get Timeline Detail- Filter by operationType SUSPENDED - expect operationType SUSPENDED\", function () {\r",
															"    pm.expect(jsonResponse.operationType).equals('SUSPENDED');\r",
															"    }); \r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/{{operationId}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														"{{operationId}}"
													],
													"query": [
														{
															"key": "operationType",
															"value": "TRANSACTION",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline && Detail OK Case Filter By Event User READMITTED",
									"item": [
										{
											"name": "GET Timeline - OK Filter By Event user READMITTED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationList[0].operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"READMITTED\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline - Happy case [BARCODE] - Get Timeline with filter by event: READMITTED - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case [BARCODE] - Get Timeline with filter by event: READMITTED - expect operation list to have one element and  operationType field in response to be equal: READMITTED\", function () {\r",
															"        pm.expect(jsonResponse.operationList.length).equals(1);\r",
															"        pm.expect(jsonResponse.operationList[0].operationType).equals('READMITTED');\r",
															"        pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&operationType=READMITTED&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "READMITTED"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Timeline Detail READMITTED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"READMITTED\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline Detail - Happy case [BARCODE] - Get Timeline Detail- Filter by operationType READMITTED - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline Detail - Happy case [BARCODE] - Get Timeline Detail- Filter by operationType READMITTED - expect operationType READMITTED\", function () {\r",
															"        pm.expect(jsonResponse.operationType).equals('READMITTED');\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/{{operationId}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														"{{operationId}}"
													],
													"query": [
														{
															"key": "operationType",
															"value": "TRANSACTION",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline && Detail OK Case Filter By Event User UNSUBSCRIBED",
									"item": [
										{
											"name": "GET Timeline - OK Filter By Event user UNSUBSCRIBED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationList[0].operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"UNSUBSCRIBED\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline - Happy case [BARCODE] - Get Timeline with filter by event: UNSUBSCRIBED - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case [BARCODE]- Get Timeline with filter by event: UNSUBSCRIBED - expect operation list to have one element and  operationType field in response to be equal:UNSUBSCRIBED\", function () {\r",
															"        pm.expect(jsonResponse.operationList.length).equals(1);\r",
															"        pm.expect(jsonResponse.operationList[0].operationType).equals('UNSUBSCRIBED');\r",
															"        pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&operationType=UNSUBSCRIBED&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "UNSUBSCRIBED"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Timeline Detail UNSUBSCRIBED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"UNSUBSCRIBED\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline Detail - Happy case [BARCODE]- Get Timeline Detail- Filter by operationType UNSUBSCRIBED - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline Detail - Happy case [BARCODE] - Get Timeline Detail- Filter by operationType UNSUBSCRIBED - expect operationType UNSUBSCRIBED\", function () {\r",
															"        pm.expect(jsonResponse.operationType).equals('UNSUBSCRIBED');\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/{{operationId}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														"{{operationId}}"
													],
													"query": [
														{
															"key": "operationType",
															"value": "TRANSACTION",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline OK Case Filter By DateFrom (existing Date)",
									"item": [
										{
											"name": "GET Timeline - OK Filter By DateFrom (existing Date)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var operationList = jsonResponse.operationList.length;\r",
															"\r",
															"if( pm.response.code != 200 || operationList < 5){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline - Happy case [BARCODE] - Get Timeline with filter by DateFrom - with a real date - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case [BARCODE] - Get Timeline with filter by DateFrom - expect field operationList to have 5 events that have date from the filter\", function () {\r",
															"        pm.expect(jsonResponse.operationList.length).equals(5);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"let today = String(moment().format(\"yyyy-MM-DD\")).concat(\"T00%3A00%3A00Z\");\r",
															"\r",
															"pm.collectionVariables.set(\"dateFrom\", today);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&size=10&dateFrom={{dateFrom}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "dateFrom",
															"value": "{{dateFrom}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline OK Case Filter By DateTo (existing Date)",
									"item": [
										{
											"name": "GET Timeline - OK Filter By DateTo (existing Date)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var operationList = jsonResponse.operationList.length;\r",
															"\r",
															"if( pm.response.code != 200 || operationList < 5){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline - Happy case [BARCODE] - Get Timeline - Filter by DateTo - with a real date - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case [BARCODE] - Get Timeline - Filter by DateTo - with a real date - expect field operationList to have 5 events\", function () {\r",
															"        pm.expect(jsonResponse.operationList.length).equals(5);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"let todayP3 = String(moment().add(3,'months').format(\"yyyy-MM-DD\")).concat(\"T00%3A00%3A00Z\");\r",
															"\r",
															"pm.collectionVariables.set(\"dateTo\", todayP3);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&size=10&dateTo={{dateTo}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "dateTo",
															"value": "{{dateTo}}"
														},
														{
															"key": null,
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline OK Case Filter By Date From and DateTo (existing Dates)",
									"item": [
										{
											"name": "Get Timeline OK Case Filter By Date From and DateTo (existing Dates)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var operationList = jsonResponse.operationList.length;\r",
															"\r",
															"if( pm.response.code != 200 || operationList < 5){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline - Happy case - Get Timeline - Filter by DateFrom and DateTo - with a real date - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case - Get Timeline with filter by DateFrom and DateTo - with a real date - expect field operationList to have 5 events\", function () {\r",
															"        pm.expect(jsonResponse.operationList.length).equals(5);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/{{initiativeId}}/?page=0&size=10&dateFrom={{dateFrom}}&dateTo={{dateTo}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "DELETE_INSTRUMENT",
															"disabled": true
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "dateFrom",
															"value": "{{dateFrom}}"
														},
														{
															"key": "dateTo",
															"value": "{{dateTo}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Unhappy Case",
					"item": [
						{
							"name": "Timeline Not Found for current user",
							"item": [
								{
									"name": "Generate Token IO Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 200){\r",
													"   retryRequest(postman,pm,setTimeout,5000);\r",
													"} else {\r",
													"    pm.test('Timeline - Happy case - Get Timeline empty list with not valid CF - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_FAKE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Timeline - [Unhappy] Without filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();\r",
													"\r",
													"if( pm.response.code != 404 || jsonResponse.code != \"TIMELINE_USER_NOT_FOUND\"){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"\r",
													"    pm.test(\"Timeline - Unhappy case - Get Timeline without filter - expect res status 404\", function () {\r",
													"        pm.response.to.have.status(404);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Timeline - Unhappy case - Get Timeline without filter  - expect code TIMELINE_USER_NOT_FOUND\", function () {\r",
													"        pm.expect(jsonResponse.code).equals(\"TIMELINE_USER_NOT_FOUND\");\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrlIdPay}}/timeline/{{initiativeId_discount}}/?page=0&size=10",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"timeline",
												"{{initiativeId_discount}}",
												""
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Timeline Detail Not found",
							"item": [
								{
									"name": "GET Timeline Detail [Unhappy]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();\r",
													"\r",
													"if( pm.response.code != 404 || jsonResponse.code != \"TIMELINE_DETAIL_NOT_FOUND\"){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"\r",
													"    pm.test(\"Timeline Detail - Unhappy case - Get Timeline Detail- - expect res status 404\", function () {\r",
													"        pm.response.to.have.status(404);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Timeline Detail - Unhappy case - Get Timeline Detail - expect code TIMELINE_DETAIL_NOT_FOUND\", function () {\r",
													"        pm.expect(jsonResponse.code).equals('TIMELINE_DETAIL_NOT_FOUND');\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "GET",
										"header": [],
										"url": "{{baseUrlIdPay}}/timeline/{{initiativeId_discount}}/{{operationId}}"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Delete Initiative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Payment - Happy Case - Delete Initiative - Status test 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "INITIATIVE_REFUND",
			"item": [
				{
					"name": "Happy case",
					"item": [
						{
							"name": "Initiative creation",
							"item": [
								{
									"name": "ENTE - Initiative creation",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Payment - Happy case - IdpayCode - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrlIdPay}}/welfare/token/test"
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
															"const serviceName = 'Test funzionali App IO IdpayCode ' + now;\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', 'https://www.google.it');"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP1 - Responses with 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP1 - Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrlIdPay}}/initiative/info",
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
															"\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"pm.collectionVariables.set('budget', 500);\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', false);\r",
															"pm.collectionVariables.set('rankingEnabled', false);\r",
															"pm.collectionVariables.set('beneficiaryBudget', 100);//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', today);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP2 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/initiative/:initiativeId/general",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"initiative",
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3-Update Initiative (criteria)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP3 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrlIdPay}}/initiative/{{initiativeId}}/beneficiary"
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if( pm.response.code != 204){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} \r",
															"\r",
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP4 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 50);\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxThresholdFrom', 50);\r",
															"pm.collectionVariables.set('trxThresholdTo', 80);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"initiativeRewardType\": \"REFUND\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n      \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/initiative/:initiativeId/reward",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"initiative",
														":initiativeId",
														"reward"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP5-Update Initiative Refund Rule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP5 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\r\n     \"timeParameter\": {\r\n        \"timeType\": \"DAILY\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/initiative/:initiativeId/refund",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"initiative",
														":initiativeId",
														"refund"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PAGOPA - Initiative update status APPROVED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Payment - Happy case - IdpayCode - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrlIdPay}}/welfare/token/test"
											},
											"response": []
										},
										{
											"name": "Update initiative into APPROVED status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(function(){}, 20000); //milliseconds"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalTokenPagopa}}"
													}
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": "{{baseUrlIdPay}}/initiative/{{initiativeId}}/approved"
											},
											"response": []
										}
									]
								},
								{
									"name": "ENTE - Initiative PUBLISHED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Payment - Happy case - IdpayCode - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrlIdPay}}/welfare/token/test"
											},
											"response": []
										},
										{
											"name": "Initiative PUBLISHED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Payment - Happy case - IdpayCode - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "PUT",
												"header": [],
												"url": "{{baseUrlIdPay}}/initiative/{{initiativeId}}/published"
											},
											"response": []
										}
									]
								},
								{
									"name": "Upload csv",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Payment - Happy case - IdpayCode - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrlIdPay}}/welfare/token/test"
											},
											"response": []
										},
										{
											"name": "Upload csv",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Payment - Happy case - IdpayCode - Upload csv - Response status is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Payment - Happy case - IdpayCode - Upload csv - Verify response body contains status: VALIDATED\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse.status).eql(\"VALIDATED\");\r",
															"    \r",
															"    pm.collectionVariables.set(\"dateFrom\", jsonResponse.elabTimeStamp);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "./postman/example_merchant_valid.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlIdPay}}/merchant/initiative/{{initiativeId}}/upload",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"merchant",
														"initiative",
														"{{initiativeId}}",
														"upload"
													],
													"query": [
														{
															"key": "",
															"value": null,
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Merchant list on initiative",
									"item": [
										{
											"name": "Get Merchant List",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response = pm.response.json().content[0];\r",
															"\r",
															"if( pm.response.code != 200 || response == undefined ){\r",
															"   retryRequest(postman,pm,setTimeout,5000);\r",
															"} else {\r",
															"\r",
															"    pm.test(\"Payment - Happy case - IdpayCode - Get merchant list - Response status is 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Payment - Happy case - IdpayCode - Get merchant list - Verify response body contains merchantId,businessName,fiscalCode,merchantStatus,updateStatusDate\", function () {\r",
															"\r",
															"        pm.expect(response).have.property(\"merchantId\");\r",
															"        pm.expect(response).have.property(\"businessName\");\r",
															"        pm.expect(response).have.property(\"fiscalCode\");\r",
															"        pm.expect(response).have.property(\"merchantStatus\");\r",
															"        pm.expect(response).have.property(\"updateStatusDate\");\r",
															"\r",
															"        pm.collectionVariables.set(\"merchantId\", response.merchantId);\r",
															"        pm.collectionVariables.set(\"merchantFiscalCode\", response.fiscalCode);\r",
															"});\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{identityPortalToken}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": "{{baseUrlIdPay}}/merchant/initiative/{{initiativeId}}/merchants"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Onboarding",
							"item": [
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 200){\r",
													"   retryRequest(postman,pm,setTimeout,5000);\r",
													"} else{\r",
													"    pm.test('Wallet - Happy case - Initiative discount - Onboarding - Generate Token IO', () => {\r",
													"        //verify response HTTP status \r",
													"        pm.response.to.have.status(200);\r",
													"        pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_fake}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 204){\r",
													"   retryRequest(postman,pm,setTimeout,5000);\r",
													"} \r",
													"\r",
													" \r",
													"pm.test(\"Wallet - Happy case - Initiative discount - Onboarding - Accept T&C - return status 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}/onboarding/"
									},
									"response": []
								},
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Wallet - Happy case - Initiative discount - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}/onboarding/initiative"
									},
									"response": []
								},
								{
									"name": "PDND + Autocertification",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Wallet - Happy case - Initiative discount - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}/onboarding/consent"
									},
									"response": []
								}
							]
						},
						{
							"name": "ADD_INSTRUMENT",
							"item": [
								{
									"name": "Enroll Instrument Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 200){\r",
													"   retryRequest(postman,pm,setTimeout);\r",
													"} else {\r",
													"    pm.test(\"Wallet - Happy case -Enroll instrument - Enroll instrument - Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"idWallet_1\", 110454);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"url": "{{baseUrlIdPay}}/wallet/{{initiativeId}}/instruments/{{idWallet_1}}"
									},
									"response": []
								},
								{
									"name": "Get Wallet Status Ok Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let responseJson = pm.response.json();\r",
													"\r",
													"if( pm.response.code != 200 || responseJson.status != 'REFUNDABLE' && responseJson.status != 'NOT_REFUNDABLE_ONLY_INSTRUMENT'){\r",
													"   retryRequest(postman,pm,setTimeout,8000);\r",
													"} else {\r",
													"    pm.test(\"Wallet - Happy case - Enroll instrument - Get wallet status - Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Wallet - Happy case - Enroll instrument - Get wallet status - Response status is one of REFUNDABLE and NOT_REFUNDABLE_ONLY_INSTRUMENT\", function () {\r",
													"        pm.expect(responseJson.status).to.be.oneOf(['REFUNDABLE','NOT_REFUNDABLE_ONLY_INSTRUMENT']);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "text"
											}
										],
										"url": "{{baseUrlIdPay}}/wallet/{{initiativeId}}/status"
									},
									"response": []
								},
								{
									"name": "Get Wallet Detail Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if( pm.response.code != 200){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"    pm.test(\"Wallet - Happy case - Enroll instrument - Get wallet detail - Response status is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "text"
											}
										],
										"url": "{{baseUrlIdPay}}/wallet/{{initiativeId}}"
									},
									"response": []
								}
							]
						},
						{
							"name": "Enroll Iban",
							"item": [
								{
									"name": "Enroll Iban",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if( pm.response.code != 200){\r",
													"   retryRequest(postman,pm,setTimeout);\r",
													"} else {\r",
													"    pm.test(\"Wallet - Happy case - Enroll iban - Enroll iban - Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"iban\": \"{{IBAN_1}}\",\r\n    \"description\": \"conto cointestato\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}/wallet/{{initiativeId}}/iban"
									},
									"response": []
								},
								{
									"name": "Get Wallet Status Ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let responseJson = pm.response.json();\r",
													"\r",
													"if( pm.response.code != 200 || responseJson.status != 'REFUNDABLE' && responseJson.status != 'REFUNDABLE_ONLY_INSTRUMENT'){\r",
													"   retryRequest(postman,pm,setTimeout,5000);\r",
													"} else {\r",
													"    pm.test(\"Wallet - Happy case - Enroll iban - Get wallet status - Response status is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Wallet - Happy case - Enroll iban - Get wallet status - Response is one of REFUNDABLE and REFUNDABLE_ONLY_INSTRUMENT\", function () {\r",
													"        pm.expect(responseJson.status).to.be.oneOf(['REFUNDABLE','REFUNDABLE_ONLY_INSTRUMENT']);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "text"
											}
										],
										"url": "{{baseUrlIdPay}}/wallet/{{initiativeId}}/status"
									},
									"response": []
								},
								{
									"name": "Get Wallet Detail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 200){\r",
													"   retryRequest(postman,pm,setTimeout);\r",
													"} else {\r",
													"    pm.test(\"Wallet - Happy case - Enroll iban - Get wallet detail - Response status is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"        pm.collectionVariables.set(\"iban\", pm.response.json().iban);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "text"
											}
										],
										"url": "{{baseUrlIdPay}}/wallet/{{initiativeId}}"
									},
									"response": []
								},
								{
									"name": "Get Wallet List",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"if( pm.response.code != 200){\r",
													"   retryRequest(postman,pm,setTimeout);\r",
													"} else {\r",
													"    pm.test(\"Wallet - Happy case - Enroll iban - Get wallet detail - Response status is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "text"
											}
										],
										"url": "{{baseUrlIdPay}}/wallet/{{initiativeId}}"
									},
									"response": []
								},
								{
									"name": "Get Iban List",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 200){\r",
													"   retryRequest(postman,pm,setTimeout);\r",
													"} else {\r",
													"    pm.test(\"Wallet - Happy case - Enroll iban - Get iban list - Response status is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}/iban"
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete instrument Copy",
							"item": [
								{
									"name": "Get Payment Instrument List Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();\r",
													"var instrumentList = jsonResponse.instrumentList;\r",
													"\r",
													"if( pm.response.code != 200 || instrumentList.length < 1 ){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"    pm.test(\"Payment - Happy case: Payment Instrument List [IDPAYCODE]\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Payment - Happy case: Payment Instrument List [IDPAYCODE] - Verify response body contains fields\", function () {\r",
													"        \r",
													"        pm.expect(instrumentList).to.have.lengthOf(1);\r",
													"        pm.expect(instrumentList[0]).have.property(\"maskedPan\");\r",
													"        pm.expect(instrumentList[0]).have.property(\"brandLogo\");\r",
													"        pm.expect(instrumentList[0]).have.property(\"brand\");\r",
													"        pm.expect(instrumentList[0]).have.property(\"idWallet\");\r",
													"        pm.expect(instrumentList[0]).have.property(\"instrumentId\");\r",
													"        pm.expect(instrumentList[0]).have.property(\"status\");\r",
													"        pm.expect(instrumentList[0]).have.property(\"channel\");\r",
													"        pm.expect(instrumentList[0]).have.property(\"instrumentType\");\r",
													"        pm.expect(instrumentList[0]).have.property(\"activationDate\");\r",
													"        \r",
													"        pm.collectionVariables.set(\"instrumentId\", instrumentList[0].instrumentId);\r",
													"    });\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													" \r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											},
											{
												"key": "Accept-Language",
												"value": "it_IT",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}/wallet/{{initiativeId}}/instruments"
									},
									"response": []
								},
								{
									"name": "Delete Instrument - Ok Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 200){\r",
													"   retryRequest(postman,pm,setTimeout);\r",
													"} else {\r",
													"    pm.test(\"Status test\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"url": "{{baseUrlIdPay}}/wallet/{{initiativeId}}/instruments/{{instrumentId}}"
									},
									"response": []
								}
							]
						},
						{
							"name": "Unsubscribe Wallet & User Copy",
							"item": [
								{
									"name": "Unsubscribe - Ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 204 ){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"    pm.test(\"Wallet - Happy case - Unsubscribed wallet & user - Unsubscribe - Response status is 204\", function () {\r",
													"        pm.response.to.have.status(204);\r",
													"    });\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrlIdPay}}/wallet/{{initiativeId}}/unsubscribe"
									},
									"response": []
								},
								{
									"name": "Get Wallet Status Ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let responseJson = pm.response.json();\r",
													"\r",
													"if( pm.response.code != 200 || responseJson.status != \"UNSUBSCRIBED\" ){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"    pm.test(\"Wallet - Happy case - Unsubscribe wallet & user - Get wallet status - Response status is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Wallet - Happy case - Unsubscribe wallet & user - Get wallet status - Wallet status is equals to UNSUBSCRIBED\", function () {\r",
													"        \r",
													"        pm.expect(responseJson.status).to.be.equals('UNSUBSCRIBED');\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "text"
											}
										],
										"url": "{{baseUrlIdPay}}/wallet/{{initiativeId}}/status"
									},
									"response": []
								},
								{
									"name": "Status Onboarding - ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"   let jsonResponse = pm.response.json();\r",
													"\r",
													"if( pm.response.code != 200 || jsonResponse.status != \"UNSUBSCRIBED\" ){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"    pm.test(\"Wallet - Happy case - Unsubscribe wallet & user - Get status onboarding - Response status is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"\r",
													"    pm.test(\"Wallet - Happy case - Unsubscribe wallet & user - Get status onboarding - Onboarding status is equals to UNSUBSCRIBED\", function () {\r",
													"     \r",
													"        pm.expect(jsonResponse.status).to.eql('UNSUBSCRIBED');\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "GET",
										"header": [],
										"url": "{{baseUrlIdPay}}/onboarding/{{initiativeId}}/status"
									},
									"response": []
								}
							]
						},
						{
							"name": "GET Timeline Copy",
							"item": [
								{
									"name": "Get Timeline OK Case Without filter",
									"item": [
										{
											"name": "GET Timeline - OK Without filter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var operationList = jsonResponse.operationList.length;\r",
															"\r",
															"if( pm.response.code != 200 || operationList < 5){\r",
															"   retryRequest(postman,pm,setTimeout,5000);\r",
															"} else {\r",
															"\r",
															"    pm.test(\"Timeline - Happy case - Get Timeline without filter - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case - Get Timeline without filter  - expect operation list to have all element\", function () {\r",
															"        pm.expect(jsonResponse.operationList.length).equals(5);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/timeline/{{initiativeId}}/?page=0&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"timeline",
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline && Detail OK Case Filter By Event ONBOARDING",
									"item": [
										{
											"name": "GET Timeline - OK Filter By Event ONBOARDING",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationList[0].operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"ONBOARDING\" ){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} \r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline with filter by event: ONBOARDING - expect res status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline with filter by event: ONBOARDING - expect operation list to have one element and  operationType field in response to be equal: ONBOARDING\", function () {\r",
															"    let jsonResponse = pm.response.json()\r",
															"    pm.expect(jsonResponse.operationList.length).equals(1);\r",
															"    pm.expect(jsonResponse.operationList[0].operationType).equals('ONBOARDING');\r",
															"    pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/timeline/{{initiativeId}}/?page=0&operationType=ONBOARDING&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"timeline",
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "ONBOARDING"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Timeline Detail ONBOARDING",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationType;\r",
															"\r",
															"if( pm.response.code != 200  || responseOperationType != \"ONBOARDING\" ){\r",
															"  retryRequest(postman,pm,setTimeout,3000);\r",
															"} \r",
															"\r",
															"pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operationType ONBOARDING - expect res status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operationType ONBOARDING - expect operationType ONBOARDING\", function () {\r",
															"    pm.expect(jsonResponse.operationType).equals('ONBOARDING');\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/timeline/{{initiativeId}}/{{operationId}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"timeline",
														"{{initiativeId}}",
														"{{operationId}}"
													],
													"query": [
														{
															"key": "operationType",
															"value": "TRANSACTION",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline && Detail OK Case Filter By Event ADD_INSTRUMENT",
									"item": [
										{
											"name": "GET Timeline - OK Filter By Event ADD_INSTRUMENT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationList[0].operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"ADD_INSTRUMENT\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} \r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline with filter by event: ADD_INSTRUMENT - expect res status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline with filter by event: ADD_INSTRUMENT - expect operation list to have one element and  operationType field in response to be equal: ADD_INSTRUMENT\", function () {\r",
															"    pm.expect(jsonResponse.operationList.length).equals(1);\r",
															"    pm.expect(jsonResponse.operationList[0].operationType).equals('ADD_INSTRUMENT');\r",
															"    pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/timeline/{{initiativeId}}/?page=0&operationType=ADD_INSTRUMENT&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"timeline",
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "ADD_INSTRUMENT"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Timeline Detail ADD INSTRUMENT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"ADD_INSTRUMENT\" ){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} \r",
															"\r",
															"pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect res status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect operationType ADD_INSTRUMENT\", function () {\r",
															"    pm.expect(jsonResponse.operationType).equals('ADD_INSTRUMENT');\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/timeline/{{initiativeId}}/{{operationId}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"timeline",
														"{{initiativeId}}",
														"{{operationId}}"
													],
													"query": [
														{
															"key": "operationType",
															"value": "TRANSACTION",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline && Detail OK Case Filter By Event ADD_IBAN",
									"item": [
										{
											"name": "GET Timeline - OK Filter By Event ADD_IBAN",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationList[0].operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"ADD_IBAN\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"\r",
															"    pm.test(\"Timeline - Happy case - Get Timeline with filter by event: ADD_IBAN - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case - Get Timeline with filter by event: ADD_IBAN - expect operation list to have one element and  operationType field in response to be equal: ADD_IBAN\", function () {\r",
															"        pm.expect(jsonResponse.operationList.length).equals(1);\r",
															"        pm.expect(jsonResponse.operationList[0].operationType).equals('ADD_IBAN');\r",
															"        pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/timeline/{{initiativeId}}/?page=0&operationType=ADD_IBAN&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"timeline",
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "ADD_IBAN"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Timeline Detail ADD IBAN",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"ADD_IBAN\" ){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"\r",
															"    pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect operationType ADD_IBAN\", function () {\r",
															"        pm.expect(jsonResponse.operationType).equals('ADD_IBAN');\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/timeline/{{initiativeId}}/{{operationId}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"timeline",
														"{{initiativeId}}",
														"{{operationId}}"
													],
													"query": [
														{
															"key": "operationType",
															"value": "TRANSACTION",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline && Detail DELETE_INSTRUMENT Copy",
									"item": [
										{
											"name": "GET Timeline - OK Filter By Event DELETE_INSTRUMENT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationList[0].operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"DELETE_INSTRUMENT\" ){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"    pm.test(\"Timeline - Happy case - Get Timeline with filter by event: DELETE_INSTRUMENT - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case - Get Timeline with filter by event: DELETE_INSTRUMENT - expect operation list to have one element and  operationType field in response to be equal: DELETE_INSTRUMENT\", function () {\r",
															"        let jsonResponse = pm.response.json()\r",
															"        pm.expect(jsonResponse.operationList.length).equals(1);\r",
															"        pm.expect(jsonResponse.operationList[0].operationType).equals('DELETE_INSTRUMENT');\r",
															"        pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/timeline/{{initiativeId}}/?page=0&operationType=DELETE_INSTRUMENT&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"timeline",
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "DELETE_INSTRUMENT"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Timeline Detail DELETE_INSTRUMENT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"DELETE_INSTRUMENT\" ){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"\r",
															"    pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect operationType DELETE_INSTRUMENT\", function () {\r",
															"        pm.expect(jsonResponse.operationType).equals('DELETE_INSTRUMENT');\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/timeline/{{initiativeId}}/{{operationId}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"timeline",
														"{{initiativeId}}",
														"{{operationId}}"
													],
													"query": [
														{
															"key": "operationType",
															"value": "TRANSACTION",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline && Detail OK Case Filter By Event User UNSUBSCRIBED",
									"item": [
										{
											"name": "GET Timeline - OK Filter By Event user UNSUBSCRIBED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationList[0].operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"UNSUBSCRIBED\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} \r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline with filter by event: UNSUBSCRIBED - expect res status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline with filter by event: UNSUBSCRIBED - expect operation list to have one element and  operationType field in response to be equal:UNSUBSCRIBED\", function () {\r",
															"    pm.expect(jsonResponse.operationList.length).equals(1);\r",
															"    pm.expect(jsonResponse.operationList[0].operationType).equals('UNSUBSCRIBED');\r",
															"    pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/timeline/{{initiativeId}}/?page=0&operationType=UNSUBSCRIBED&size=10",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"timeline",
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "UNSUBSCRIBED"
														},
														{
															"key": "size",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Timeline Detail UNSUBSCRIBED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var responseOperationType = jsonResponse.operationType;\r",
															"\r",
															"if( pm.response.code != 200 || responseOperationType != \"UNSUBSCRIBED\"){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} \r",
															"\r",
															"pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect res status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect operationType UNSUBSCRIBED\", function () {\r",
															"    let jsonResponse = pm.response.json()\r",
															"    pm.expect(jsonResponse.operationType).equals('UNSUBSCRIBED');\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/timeline/{{initiativeId}}/{{operationId}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"timeline",
														"{{initiativeId}}",
														"{{operationId}}"
													],
													"query": [
														{
															"key": "operationType",
															"value": "TRANSACTION",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline OK Case Filter By DateFrom (existing Date)",
									"item": [
										{
											"name": "GET Timeline - OK Filter By DateFrom (existing Date)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var operationList = jsonResponse.operationList.length;\r",
															"\r",
															"if( pm.response.code != 200 || operationList < 5){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} \r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline with filter by DateFrom - with a real date - expect res status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline with filter by DateFrom - expect field operationList to have 5 events that have date from the filter\", function () {\r",
															"    pm.expect(jsonResponse.operationList.length).equals(5);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"let today = String(moment().format(\"yyyy-MM-DD\")).concat(\"T00%3A00%3A00Z\");\r",
															"\r",
															"pm.collectionVariables.set(\"dateFrom\", today);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/timeline/{{initiativeId}}/?page=0&size=10&dateFrom={{dateFrom}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"timeline",
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "dateFrom",
															"value": "{{dateFrom}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline OK Case Filter By DateTo (existing Date)",
									"item": [
										{
											"name": "GET Timeline - OK Filter By DateTo (existing Date)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var operationList = jsonResponse.operationList.length;\r",
															"\r",
															"if( pm.response.code != 200 || operationList < 5){\r",
															"  retryRequest(postman,pm,setTimeout,3000);\r",
															"}\r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline - Filter by DateTo - with a real date - expect res status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Timeline - Happy case - Get Timeline - Filter by DateTo - with a real date - expect field operationList to have 5 events\", function () {\r",
															"    pm.expect(jsonResponse.operationList.length).equals(5);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"let todayP3 = String(moment().add(3,'months').format(\"yyyy-MM-DD\")).concat(\"T00%3A00%3A00Z\");\r",
															"\r",
															"pm.collectionVariables.set(\"dateTo\", todayP3);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/timeline/{{initiativeId}}/?page=0&size=10&dateTo={{dateTo}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"timeline",
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "dateTo",
															"value": "{{dateTo}}"
														},
														{
															"key": null,
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Timeline OK Case Filter By Date From and DateTo (existing Dates)",
									"item": [
										{
											"name": "Get Timeline OK Case Filter By Date From and DateTo (existing Dates) Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"var operationList = jsonResponse.operationList.length;\r",
															"\r",
															"if( pm.response.code != 200 || operationList < 5){\r",
															"   retryRequest(postman,pm,setTimeout,3000);\r",
															"} else {\r",
															"\r",
															"    pm.test(\"Timeline - Happy case - Get Timeline - Filter by DateFrom and DateTo - with a real date - expect res status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Timeline - Happy case - Get Timeline with filter by DateFrom and DateTo - with a real date - expect field operationList to have 5 events\", function () {\r",
															"        pm.expect(jsonResponse.operationList.length).equals(5);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": {
														"token": "{{tokenIO}}"
													}
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrlIdPay}}/timeline/{{initiativeId}}/?page=0&size=10&dateFrom={{dateFrom}}&dateTo={{dateTo}}",
													"host": [
														"{{baseUrlIdPay}}"
													],
													"path": [
														"timeline",
														"{{initiativeId}}",
														""
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "operationType",
															"value": "DELETE_INSTRUMENT",
															"disabled": true
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "dateFrom",
															"value": "{{dateFrom}}"
														},
														{
															"key": "dateTo",
															"value": "{{dateTo}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Unhappy Case",
					"item": [
						{
							"name": "Timeline Not Found for current user",
							"item": [
								{
									"name": "Generate Token IO Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if( pm.response.code != 200){\r",
													"   retryRequest(postman,pm,setTimeout,5000);\r",
													"} else {\r",
													"    pm.test('Timeline - Happy case - Get Timeline empty list with not valid CF - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_FAKE}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_FAKE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Timeline - [Unhappy] Without filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();\r",
													"\r",
													"if( pm.response.code != 404 || jsonResponse.code != \"TIMELINE_USER_NOT_FOUND\"){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"\r",
													"    pm.test(\"Timeline - Unhappy case - Get Timeline without filter - expect res status 404\", function () {\r",
													"        pm.response.to.have.status(404);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Timeline - Unhappy case - Get Timeline without filter  - expect code TIMELINE_USER_NOT_FOUND\", function () {\r",
													"        pm.expect(jsonResponse.code).equals(\"TIMELINE_USER_NOT_FOUND\");\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrlIdPay}}/timeline/{{initiativeId_discount}}/?page=0&size=10",
											"host": [
												"{{baseUrlIdPay}}"
											],
											"path": [
												"timeline",
												"{{initiativeId_discount}}",
												""
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Timeline Detail Not found",
							"item": [
								{
									"name": "GET Timeline Detail [Unhappy]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json();\r",
													"\r",
													"if( pm.response.code != 404 || jsonResponse.code != \"TIMELINE_DETAIL_NOT_FOUND\"){\r",
													"   retryRequest(postman,pm,setTimeout,3000);\r",
													"} else {\r",
													"\r",
													"    pm.test(\"Timeline Detail - Unhappy case - Get Timeline Detail- - expect res status 404\", function () {\r",
													"        pm.response.to.have.status(404);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Timeline Detail - Unhappy case - Get Timeline Detail - expect code TIMELINE_DETAIL_NOT_FOUND\", function () {\r",
													"        pm.expect(jsonResponse.code).equals('TIMELINE_DETAIL_NOT_FOUND');\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{tokenIO}}"
											}
										},
										"method": "GET",
										"header": [],
										"url": "{{baseUrlIdPay}}/timeline/{{initiativeId_discount}}/{{operationId}}"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Delete Initiative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Payment - Happy Case - Delete Initiative - Status test 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}"
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{tokenIO}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"retryRequest = (postman, pm, setTimeout, waitingMillis = 500, maxAttempts = 10) => {",
					"    if(!postman || !pm || !setTimeout){",
					"        throw new Error(\"Invalid invoke to retryRequest function! Some required parameters are undefined: postman=\" + postman + \", pm=\" + pm + \", setTimeout=\" + setTimeout)",
					"    }",
					" ",
					"    const retryVariableName = \"retry_\" + pm.info.requestId",
					"    const attempt = (pm.variables.get(retryVariableName) ?? 0) + 1;",
					"    if(attempt < maxAttempts) {",
					"        console.info(pm.info.requestName + \" not ready, retrying [attempt \" + attempt + \"/\" + maxAttempts + \"] after \" + waitingMillis + \" ms\");",
					"        pm.variables.set(retryVariableName, attempt)",
					"        postman.setNextRequest(pm.info.requestId);",
					"        return setTimeout(()=>{}, waitingMillis);",
					"    } else {",
					"        pm.test(pm.info.requestName + \" not ready\", () => pm.expect.fail(attempt + \" attempts\"));",
					"    }",
					"}",
					"",
					"if(pm.response.code == 429){",
					"    console.log(\"Obtained 429! Performing retry...\")",
					"    retryRequest(postman, pm, setTimeout);",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "tokenIO",
			"value": ""
		},
		{
			"key": "Ocp-Apim-Trace",
			"value": "true"
		},
		{
			"key": "test cf",
			"value": "test_Fake_User"
		},
		{
			"key": "initiativeId timeline",
			"value": "63fdd546fea3f35a5644e735"
		},
		{
			"key": "transaction-op-id",
			"value": ""
		},
		{
			"key": "reversal-op-id",
			"value": ""
		},
		{
			"key": "add_instrument-op-id",
			"value": ""
		},
		{
			"key": "delete_instrument-op-id",
			"value": ""
		},
		{
			"key": "add_iban-op-id",
			"value": ""
		},
		{
			"key": "onboarding-op-id",
			"value": ""
		},
		{
			"key": "paid_refund-op-id",
			"value": ""
		},
		{
			"key": "rejected_refund-op-id",
			"value": ""
		},
		{
			"key": "initiativeId_discount",
			"value": "649ee68ef604477a2463f8a0",
			"type": "string"
		},
		{
			"key": "identityPortalToken",
			"value": ""
		},
		{
			"key": "serviceName",
			"value": ""
		},
		{
			"key": "description",
			"value": ""
		},
		{
			"key": "channel_type",
			"value": ""
		},
		{
			"key": "channel_contact",
			"value": ""
		},
		{
			"key": "budgetCents",
			"value": ""
		},
		{
			"key": "beneficiaryType",
			"value": ""
		},
		{
			"key": "beneficiaryKnown",
			"value": ""
		},
		{
			"key": "rankingEnabled",
			"value": ""
		},
		{
			"key": "beneficiaryBudgetCents",
			"value": ""
		},
		{
			"key": "rankingStartDate",
			"value": ""
		},
		{
			"key": "rankingEndDate",
			"value": ""
		},
		{
			"key": "startDate",
			"value": ""
		},
		{
			"key": "endDate",
			"value": ""
		},
		{
			"key": "rewardRuleType",
			"value": ""
		},
		{
			"key": "rewardValueType",
			"value": ""
		},
		{
			"key": "rewardRuleValue",
			"value": ""
		},
		{
			"key": "trxDaysOfWeek",
			"value": ""
		},
		{
			"key": "trxDayEndTime",
			"value": ""
		},
		{
			"key": "trxThresholdFrom",
			"value": ""
		},
		{
			"key": "trxThresholdTo",
			"value": ""
		},
		{
			"key": "trxCountFrom",
			"value": ""
		},
		{
			"key": "trxCountTo",
			"value": ""
		},
		{
			"key": "trxRewardLimitFrequency",
			"value": ""
		},
		{
			"key": "trxRewardLimitValue",
			"value": ""
		},
		{
			"key": "identityPortalTokenPagopa",
			"value": ""
		},
		{
			"key": "merchantId",
			"value": ""
		},
		{
			"key": "merchantPortalToken",
			"value": ""
		},
		{
			"key": "trxDate",
			"value": ""
		},
		{
			"key": "randomNum",
			"value": ""
		},
		{
			"key": "trxCode",
			"value": ""
		},
		{
			"key": "transactionId",
			"value": ""
		},
		{
			"key": "effectiveAmountCents",
			"value": ""
		},
		{
			"key": "rewardAmountCents",
			"value": ""
		},
		{
			"key": "transaction-op-id-cancelled",
			"value": ""
		},
		{
			"key": "transaction-op-id-authorized",
			"value": ""
		},
		{
			"key": "transaction-op-id-rewarded",
			"value": ""
		},
		{
			"key": "CF_fake",
			"value": "RNZPMP80A44X000M",
			"type": "string"
		},
		{
			"key": "instrumentId",
			"value": ""
		},
		{
			"key": "initiativeId",
			"value": ""
		},
		{
			"key": "merchantFiscalCode",
			"value": ""
		},
		{
			"key": "dateFrom",
			"value": ""
		},
		{
			"key": "dateTo",
			"value": ""
		},
		{
			"key": "operationId",
			"value": ""
		},
		{
			"key": "idpayCode-instrumentId",
			"value": ""
		},
		{
			"key": "collection_tries",
			"value": ""
		},
		{
			"key": "idWallet_1",
			"value": ""
		},
		{
			"key": "iban",
			"value": ""
		},
		{
			"key": "budget",
			"value": ""
		},
		{
			"key": "beneficiaryBudget",
			"value": ""
		}
	]
}