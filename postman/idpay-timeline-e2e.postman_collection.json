{
  "info": {
    "_postman_id": "8ebf5dca-c80a-40a4-9a12-6afbe4211cb6",
    "name": "Timeline - e2e test retry",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "26204012",
    "_collection_link": "https://idpay-test-funzionali.postman.co/workspace/IDPay-Test-Funzionali~d5f80577-ab5d-4d50-87c4-a81b6bcba6bc/collection/26204012-8ebf5dca-c80a-40a4-9a12-6afbe4211cb6?action=share&source=collection_link&creator=26204012"
  },
  "item": [
    {
      "name": "IDPAYCODE Copy",
      "item": [
        {
          "name": "Initiative creation",
          "item": [
            {
              "name": "ENTE - Initiative creation",
              "item": [
                {
                  "name": "Generate Portal Token",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let textResponse = pm.response.text()\r",
                          "\r",
                          "pm.test('Payment - Happy case - IdpayCode - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "default"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlToken}}/welfare/token/test",
                      "host": [
                        "{{baseUrlToken}}"
                      ],
                      "path": [
                        "welfare",
                        "token",
                        "test"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "STEP1-Insert Initiative (Service Info)",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let moment = require('moment');\r",
                          "const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
                          "const serviceName = 'Test funzionali App IO IdpayCode ' + now;\r",
                          "pm.collectionVariables.set('serviceName', serviceName);\r",
                          "pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                          "\r",
                          "pm.collectionVariables.set('channel_type', 'web');\r",
                          "pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "var jsonData = JSON.parse(responseBody);\r",
                          "// console.log('jsondata', jsonData);\r",
                          "// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
                          "pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP1 - Responses with 201\", function () {\r",
                          "    pm.response.to.have.status(201);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP1 - Verify response body\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{identityPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlInitiative}}/info",
                      "host": [
                        "{{baseUrlInitiative}}"
                      ],
                      "path": [
                        "info"
                      ]
                    },
                    "description": "Save initiative and first subset of data 'general info'"
                  },
                  "response": []
                },
                {
                  "name": "STEP2-Update Initiative (general Info)",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let moment = require('moment');\r",
                          "//Format: YYYY-MM-DD\r",
                          "let today = String(moment().format('YYYY-MM-DD'));\r",
                          "let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
                          "let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
                          "let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
                          "\r",
                          "let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
                          "\r",
                          "\r",
                          "/*\r",
                          "var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
                          "pm.collectionVariables.set('...', _.random(0, 180));\r",
                          "*/\r",
                          "//_.floor(_.random(1.0, 100000.0, true),2)\r",
                          "pm.collectionVariables.set('budget', 500);\r",
                          "pm.collectionVariables.set('beneficiaryType', 'PF');\r",
                          "//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
                          "pm.collectionVariables.set('beneficiaryKnown', false);\r",
                          "pm.collectionVariables.set('rankingEnabled', false);\r",
                          "pm.collectionVariables.set('beneficiaryBudget', 100);//default max 1000\r",
                          "pm.collectionVariables.set('rankingStartDate', today);\r",
                          "pm.collectionVariables.set('rankingEndDate', todayP1);\r",
                          "pm.collectionVariables.set('startDate', today);\r",
                          "pm.collectionVariables.set('endDate', todayP3);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP2 - Responses with 204\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{identityPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlInitiative}}/:initiativeId/general",
                      "host": [
                        "{{baseUrlInitiative}}"
                      ],
                      "path": [
                        ":initiativeId",
                        "general"
                      ],
                      "variable": [
                        {
                          "key": "initiativeId",
                          "value": "{{initiativeId}}"
                        }
                      ]
                    },
                    "description": "Save initiative and first subset of data 'general info'"
                  },
                  "response": []
                },
                {
                  "name": "STEP3-Update Initiative (criteria)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP3 - Responses with 204\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{identityPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
                      "host": [
                        "{{baseUrlInitiative}}"
                      ],
                      "path": [
                        "{{initiativeId}}",
                        "beneficiary"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "STEP4-Update Initiative Trx-Reward rules",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "var maxNumberOfTries = 3;\r",
                          "var timeout = 5000;\r",
                          "\r",
                          "if (!pm.environment.get(\"collection_tries\")) {\r",
                          "    pm.environment.set(\"collection_tries\", 1);\r",
                          "}\r",
                          "\r",
                          "if(pm.environment.get(\"collection_tries\") < maxNumberOfTries && pm.response.code != 204){\r",
                          "   var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);\r",
                          "    pm.environment.set(\"collection_tries\", tries + 1);\r",
                          "    setTimeout(() => {\r",
                          "        postman.setNextRequest(pm.info.requestName)\r",
                          "    }, timeout);\r",
                          "} else {\r",
                          "    pm.environment.unset(\"collection_tries\");\r",
                          "}\r",
                          "\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP4 - Responses with 204\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "setTimeout(()=> {}, 10000)\r",
                          "const d = new Date();\r",
                          "dateString = d.toISOString()\r",
                          "let endTime = dateString.split('T');\r",
                          "endTime = endTime[1].split('Z');\r",
                          "\r",
                          "pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
                          "const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
                          "rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
                          "const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
                          "pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
                          "if (selectedRewardValueType == \"PERCENTAGE\") {\r",
                          "    pm.collectionVariables.set('rewardRuleValue', 100);\r",
                          "} else {\r",
                          "    pm.collectionVariables.set('rewardRuleValue', 50);\r",
                          "}\r",
                          "\r",
                          "pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
                          "pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
                          "pm.collectionVariables.set('trxThresholdFrom', 50);\r",
                          "pm.collectionVariables.set('trxThresholdTo', 80);\r",
                          "pm.collectionVariables.set('trxCountFrom', 3);\r",
                          "pm.collectionVariables.set('trxCountTo', 11);\r",
                          "pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
                          "pm.collectionVariables.set('trxRewardLimitValue', 3);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{identityPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"initiativeRewardType\": \"DISCOUNT\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n      \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlInitiative}}/:initiativeId/reward",
                      "host": [
                        "{{baseUrlInitiative}}"
                      ],
                      "path": [
                        ":initiativeId",
                        "reward"
                      ],
                      "variable": [
                        {
                          "key": "initiativeId",
                          "value": "{{initiativeId}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "STEP5-Update Initiative Refund Rule",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Payment - Happy case - IdpayCode - Initiative creation - STEP5 - Responses with 204\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{identityPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": " {\r\n     \"timeParameter\": {\r\n        \"timeType\": \"DAILY\"\r\n    }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlInitiative}}/:initiativeId/refund",
                      "host": [
                        "{{baseUrlInitiative}}"
                      ],
                      "path": [
                        ":initiativeId",
                        "refund"
                      ],
                      "variable": [
                        {
                          "key": "initiativeId",
                          "value": "{{initiativeId}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "PAGOPA - Initiative update status APPROVED",
              "item": [
                {
                  "name": "Generate Portal Token",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let textResponse = pm.response.text()\r",
                          "\r",
                          "pm.test('Payment - Happy case - IdpayCode - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
                          "});\r",
                          "\r",
                          "//response time is less than 1s\r",
                          "tests[\"Response time is less than 1s\"] = responseTime < 1000;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "default"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlToken}}/welfare/token/test",
                      "host": [
                        "{{baseUrlToken}}"
                      ],
                      "path": [
                        "welfare",
                        "token",
                        "test"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Update initiative into APPROVED status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Payment - Happy case - IdpayCode - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "//setTimeout(function(){}, 20000); //milliseconds"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{identityPortalTokenPagopa}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
                      "host": [
                        "{{baseUrlInitiative}}"
                      ],
                      "path": [
                        "{{initiativeId}}",
                        "approved"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "ENTE - Initiative PUBLISHED",
              "item": [
                {
                  "name": "Generate Portal Token",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let textResponse = pm.response.text()\r",
                          "\r",
                          "pm.test('Payment - Happy case - IdpayCode - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                          "});\r",
                          "\r",
                          "//response time is less than 1s\r",
                          "tests[\"Response time is less than 1s\"] = responseTime < 1000;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "default"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlToken}}/welfare/token/test",
                      "host": [
                        "{{baseUrlToken}}"
                      ],
                      "path": [
                        "welfare",
                        "token",
                        "test"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Initiative PUBLISHED",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Payment - Happy case - IdpayCode - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disabledSystemHeaders": {}
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{identityPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
                      "host": [
                        "{{baseUrlInitiative}}"
                      ],
                      "path": [
                        "{{initiativeId}}",
                        "published"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Upload csv",
              "item": [
                {
                  "name": "Generate Portal Token",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let textResponse = pm.response.text()\r",
                          "\r",
                          "pm.test('Payment - Happy case - IdpayCode - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "default"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlToken}}/welfare/token/test",
                      "host": [
                        "{{baseUrlToken}}"
                      ],
                      "path": [
                        "welfare",
                        "token",
                        "test"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Upload csv",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Payment - Happy case - IdpayCode - Upload csv - Response status is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - IdpayCode - Upload csv - Verify response body contains status: VALIDATED\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.status).eql(\"VALIDATED\");\r",
                          "    \r",
                          "    pm.collectionVariables.set(\"dateFrom\", jsonResponse.elabTimeStamp);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{identityPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "file",
                          "type": "file",
                          "src": "./postman/example_merchant_valid.csv"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{baseUrlToken}}/merchant/initiative/{{initiativeId}}/upload",
                      "host": [
                        "{{baseUrlToken}}"
                      ],
                      "path": [
                        "merchant",
                        "initiative",
                        "{{initiativeId}}",
                        "upload"
                      ],
                      "query": [
                        {
                          "key": "",
                          "value": null,
                          "disabled": true
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Get Merchant list on initiative",
              "item": [
                {
                  "name": "Get Merchant List",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "var maxNumberOfTries = 3;\r",
                          "var timeout = 5000;\r",
                          "\r",
                          "if (!pm.environment.get(\"collection_tries\")) {\r",
                          "    pm.environment.set(\"collection_tries\", 1);\r",
                          "}\r",
                          "\r",
                          "if(pm.environment.get(\"collection_tries\") < maxNumberOfTries &&  pm.response.code != 200){\r",
                          "   var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);\r",
                          "    pm.environment.set(\"collection_tries\", tries + 1);\r",
                          "    setTimeout(() => {\r",
                          "        postman.setNextRequest(pm.info.requestName)\r",
                          "        }, timeout);\r",
                          "} else {\r",
                          "    pm.environment.unset(\"collection_tries\");\r",
                          "}\r",
                          " \r",
                          "\r",
                          "pm.test(\"Payment - Happy case - IdpayCode - Get merchant list - Response status is 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case - IdpayCode - Get merchant list - Verify response body contains merchantId,businessName,fiscalCode,merchantStatus,updateStatusDate\", function () {\r",
                          "\r",
                          "    const response = pm.response.json().content[0];\r",
                          "    pm.expect(response).have.property(\"merchantId\");\r",
                          "    pm.expect(response).have.property(\"businessName\");\r",
                          "    pm.expect(response).have.property(\"fiscalCode\");\r",
                          "    pm.expect(response).have.property(\"merchantStatus\");\r",
                          "    pm.expect(response).have.property(\"updateStatusDate\");\r",
                          "\r",
                          "    pm.collectionVariables.set(\"merchantId\", response.merchantId);\r",
                          "    pm.collectionVariables.set(\"merchantFiscalCode\", response.fiscalCode);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{identityPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrlMerchant}}/initiative/{{initiativeId}}/merchants",
                      "host": [
                        "{{baseUrlMerchant}}"
                      ],
                      "path": [
                        "initiative",
                        "{{initiativeId}}",
                        "merchants"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        },
        {
          "name": "Onboarding",
          "item": [
            {
              "name": "Generate Token IO",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var maxNumberOfTries = 3;\r",
                      "var timeout = 5000;\r",
                      "\r",
                      "if (!pm.environment.get(\"collection_tries\")) {\r",
                      "    pm.environment.set(\"collection_tries\", 1);\r",
                      "}\r",
                      "\r",
                      "if(pm.environment.get(\"collection_tries\") < maxNumberOfTries && pm.response.code != 200){\r",
                      "   var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);\r",
                      "    pm.environment.set(\"collection_tries\", tries + 1);\r",
                      "    setTimeout(() => {\r",
                      "        postman.setNextRequest(pm.info.requestName)\r",
                      "        }, timeout);\r",
                      "} else {\r",
                      "    pm.environment.unset(\"collection_tries\");\r",
                      "}\r",
                      "\r",
                      "pm.test('Wallet - Happy case - Initiative discount - Onboarding - Generate Token IO', () => {\r",
                      "    //verify response HTTP status \r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key",
                    "value": "{{genericSubscriptionKey}}",
                    "type": "default"
                  },
                  {
                    "key": "Ocp-Apim-Trace",
                    "value": "true",
                    "type": "default"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_1}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "rtd",
                    "mock-io",
                    "login"
                  ],
                  "query": [
                    {
                      "key": "fiscalCode",
                      "value": "{{CF_1}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Accept T&C",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var maxNumberOfTries = 6;\r",
                      "var timeout = 5000;\r",
                      "\r",
                      "if (!pm.environment.get(\"collection_tries\")) {\r",
                      "    pm.environment.set(\"collection_tries\", 1);\r",
                      "}\r",
                      "\r",
                      "if(pm.environment.get(\"collection_tries\") < maxNumberOfTries &&  pm.response.code != 204){\r",
                      "   var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);\r",
                      "    pm.environment.set(\"collection_tries\", tries + 1);\r",
                      "    setTimeout(() => {\r",
                      "        postman.setNextRequest(pm.info.requestName)\r",
                      "        }, timeout);\r",
                      "} else {\r",
                      "    pm.environment.unset(\"collection_tries\");\r",
                      "}\r",
                      " \r",
                      "pm.test(\"Wallet - Happy case - Initiative discount - Onboarding - Accept T&C - return status 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key",
                    "value": "{{apimSubscriptionKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Ocp-Apim-Trace",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/idpay/onboarding/",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "idpay",
                    "onboarding",
                    ""
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Prerequisites Check",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Wallet - Happy case - Initiative discount - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key",
                    "value": "{{apimSubscriptionKey}}",
                    "type": "text"
                  },
                  {
                    "key": "Ocp-Apim-Trace",
                    "value": "true",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/idpay/onboarding/initiative",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "idpay",
                    "onboarding",
                    "initiative"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "PDND + Autocertification",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Wallet - Happy case - Initiative discount - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
                      "    pm.response.to.have.status(202);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/idpay/onboarding/consent",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "idpay",
                    "onboarding",
                    "consent"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Happy Case",
          "item": [
            {
              "name": "Enroll idpayCode",
              "item": [
                {
                  "name": "Generate Token IO",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Payment - Happy case - IdpayCode - Enroll code - Generate Token IO', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{genericSubscriptionKey}}",
                        "type": "default"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "default"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_1}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "rtd",
                        "mock-io",
                        "login"
                      ],
                      "query": [
                        {
                          "key": "fiscalCode",
                          "value": "{{CF_1}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Generate Code",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Payment - Happy case:  Generate Code [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "pm.test(\"Payment - Happy case: Generate Code [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse).to.have.property(\"idpayCode\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/wallet/code/generate",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "idpay",
                        "wallet",
                        "code",
                        "generate"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Enroll Code from Wallet",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "var maxNumberOfTries = 3;\r",
                          "var timeout = 5000;\r",
                          "\r",
                          "if (!pm.environment.get(\"collection_tries\")) {\r",
                          "    pm.environment.set(\"collection_tries\", 1);\r",
                          "}\r",
                          "\r",
                          "if(pm.environment.get(\"collection_tries\") < maxNumberOfTries &&  pm.response.code != 200){\r",
                          "   var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);\r",
                          "    pm.environment.set(\"collection_tries\", tries + 1);\r",
                          "    setTimeout(() => {\r",
                          "        postman.setNextRequest(pm.info.requestName)\r",
                          "        }, timeout);\r",
                          "} else {\r",
                          "    pm.environment.unset(\"collection_tries\");\r",
                          "}\r",
                          " \r",
                          "pm.test(\"Payment - Happy case:  Enroll Code [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/code/instruments",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "idpay",
                        "wallet",
                        "{{initiativeId}}",
                        "code",
                        "instruments"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Get Payment Instrument List",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "var maxNumberOfTries = 3;\r",
                          "var timeout = 3000;\r",
                          "var instrumentList = jsonResponse.instrumentList.length;\r",
                          "\r",
                          "if (!pm.environment.get(\"collection_tries\")) {\r",
                          "    pm.environment.set(\"collection_tries\", 1);\r",
                          "}\r",
                          "\r",
                          "if(pm.environment.get(\"collection_tries\") < maxNumberOfTries && instrumentList < 2 || pm.response.code != 200){\r",
                          "   var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);\r",
                          "    pm.environment.set(\"collection_tries\", tries + 1);\r",
                          "    setTimeout(() => {\r",
                          "        postman.setNextRequest(pm.info.requestName)\r",
                          "        }, timeout);\r",
                          "} else {\r",
                          "    pm.environment.unset(\"collection_tries\");\r",
                          "}\r",
                          "\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: Payment Instrument List [IDPAYCODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: Payment Instrument List [IDPAYCODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    \r",
                          "    pm.expect(jsonResponse.instrumentList).to.have.lengthOf(2);\r",
                          "\r",
                          "    const response = pm.response.json().instrumentList[1];\r",
                          "    pm.expect(response).to.have.property(\"instrumentId\");\r",
                          "    pm.expect(response).to.have.property(\"status\");\r",
                          "    pm.expect(response).to.have.property(\"channel\");\r",
                          "    pm.expect(response).to.have.property(\"instrumentType\");\r",
                          "    pm.expect(response.instrumentType).equals(\"IDPAYCODE\");\r",
                          "    \r",
                          "    pm.collectionVariables.set(\"idpayCode-instrumentId\", response.instrumentId);\r",
                          "  \r",
                          "});\r",
                          " \r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{apimSubscriptionKey}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      },
                      {
                        "key": "Accept-Language",
                        "value": "it_IT",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/instruments",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "idpay",
                        "wallet",
                        "{{initiativeId}}",
                        "instruments"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "User suspend",
              "item": [
                {
                  "name": "Suspend User Discount",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Payment - IdpayCode -  SUSPENDED user - Suspend user', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(204);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{identityPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Fiscal-Code",
                        "value": "{{CF_1}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/beneficiary/suspend",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "idpay",
                        "initiative",
                        "{{initiativeId}}",
                        "beneficiary",
                        "suspend"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "User readmitted",
              "item": [
                {
                  "name": "readmit User Discount",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Payment - IdpayCode - READMITTED user - Readmit user', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(204);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{identityPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Fiscal-Code",
                        "value": "{{CF_1}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/beneficiary/readmit",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "idpay",
                        "initiative",
                        "{{initiativeId}}",
                        "beneficiary",
                        "readmit"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "User unsubscribed",
              "item": [
                {
                  "name": "Unsubscribe - Ok",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "var maxNumberOfTries = 3;\r",
                          "var timeout = 5000;\r",
                          "\r",
                          "if (!pm.environment.get(\"collection_tries\")) {\r",
                          "    pm.environment.set(\"collection_tries\", 1);\r",
                          "}\r",
                          "\r",
                          "if(pm.environment.get(\"collection_tries\") < maxNumberOfTries &&  pm.response.code != 204){\r",
                          "   var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);\r",
                          "    pm.environment.set(\"collection_tries\", tries + 1);\r",
                          "    setTimeout(() => {\r",
                          "        postman.setNextRequest(pm.info.requestName)\r",
                          "        }, timeout);\r",
                          "} else {\r",
                          "    pm.environment.unset(\"collection_tries\");\r",
                          "}\r",
                          "\r",
                          "pm.test(\"Payment - IdpayCode - UNSUBSCRIBED user - Unsubscribe - Response status is 204\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});\r",
                          "\r",
                          "\r",
                          "\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "setTimeout(() => {}, 10000);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{apimSubscriptionKey}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/unsubscribe",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "idpay",
                        "wallet",
                        "{{initiativeId}}",
                        "unsubscribe"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        },
        {
          "name": "GET Timeline",
          "item": [
            {
              "name": "Get Timeline OK Case Without filter",
              "item": [
                {
                  "name": "GET Timeline - OK Without filter",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "var maxNumberOfTries = 4;\r",
                          "var timeout = 5000;\r",
                          "var operationList = jsonResponse.operationList.length;\r",
                          "\r",
                          "if (!pm.environment.get(\"collection_tries\")) {\r",
                          "    pm.environment.set(\"collection_tries\", 1);\r",
                          "}\r",
                          "\r",
                          "if(pm.environment.get(\"collection_tries\") < maxNumberOfTries && operationList < 5 || pm.response.code != 200){\r",
                          "   var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);\r",
                          "    pm.environment.set(\"collection_tries\", tries + 1);\r",
                          "    setTimeout(() => {\r",
                          "        postman.setNextRequest(pm.info.requestName)\r",
                          "        }, timeout);\r",
                          "} else {\r",
                          "    pm.environment.unset(\"collection_tries\");\r",
                          "}\r",
                          "\r",
                          "pm.test(\"Timeline - Happy case - Get Timeline without filter - expect res status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Timeline - Happy case - Get Timeline without filter  - expect operation list to have all element\", function () {\r",
                          "    pm.expect(jsonResponse.operationList.length).equals(5);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId}}/?page=0&size=10",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "idpay",
                        "timeline",
                        "{{initiativeId}}",
                        ""
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "10"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Get Timeline && Detail OK Case Filter By Event ADD_INSTRUMENT",
              "item": [
                {
                  "name": "GET Timeline - OK Filter By Event ADD_INSTRUMENT",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "var maxNumberOfTries = 4;\r",
                          "var timeout = 3000;\r",
                          "var responseOperationType = jsonResponse.operationList[0].operationType;\r",
                          "\r",
                          "if (!pm.environment.get(\"collection_tries\")) {\r",
                          "    pm.environment.set(\"collection_tries\", 1);\r",
                          "}\r",
                          "\r",
                          "if(pm.environment.get(\"collection_tries\") < maxNumberOfTries && responseOperationType != \"ADD_INSTRUMENT\" || pm.response.code != 200){\r",
                          "   var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);\r",
                          "    pm.environment.set(\"collection_tries\", tries + 1);\r",
                          "    setTimeout(() => {\r",
                          "        postman.setNextRequest(pm.info.requestName)\r",
                          "        }, timeout);\r",
                          "} else {\r",
                          "    pm.environment.unset(\"collection_tries\");\r",
                          "}\r",
                          "\r",
                          "pm.test(\"Timeline - Happy case - Get Timeline with filter by event: ADD_INSTRUMENT - expect res status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Timeline - Happy case - Get Timeline with filter by event: ADD_INSTRUMENT - expect operation list to have one element and  operationType field in response to be equal: ADD_INSTRUMENT\", function () {\r",
                          "    pm.expect(jsonResponse.operationList.length).equals(1);\r",
                          "    pm.expect(jsonResponse.operationList[0].operationType).equals('ADD_INSTRUMENT');\r",
                          "    pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId}}/?page=0&operationType=ADD_INSTRUMENT&size=10",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "idpay",
                        "timeline",
                        "{{initiativeId}}",
                        ""
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "operationType",
                          "value": "ADD_INSTRUMENT"
                        },
                        {
                          "key": "size",
                          "value": "10"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GET Timeline Detail ADD INSTRUMENT",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "var maxNumberOfTries = 4;\r",
                          "var timeout = 3000;\r",
                          "var responseOperationType = jsonResponse.operationType;\r",
                          "\r",
                          "if (!pm.environment.get(\"collection_tries\")) {\r",
                          "    pm.environment.set(\"collection_tries\", 1);\r",
                          "}\r",
                          "\r",
                          "if(pm.environment.get(\"collection_tries\") < maxNumberOfTries && responseOperationType != \"ADD_INSTRUMENT\" || pm.response.code != 200){\r",
                          "   var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);\r",
                          "    pm.environment.set(\"collection_tries\", tries + 1);\r",
                          "    setTimeout(() => {\r",
                          "        postman.setNextRequest(pm.info.requestName)\r",
                          "        }, timeout);\r",
                          "} else {\r",
                          "    pm.environment.unset(\"collection_tries\");\r",
                          "}\r",
                          "\r",
                          "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect res status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect operationType ADD_INSTRUMENT\", function () {\r",
                          "    pm.expect(jsonResponse.operationType).equals('ADD_INSTRUMENT');\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId}}/{{operationId}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "idpay",
                        "timeline",
                        "{{initiativeId}}",
                        "{{operationId}}"
                      ],
                      "query": [
                        {
                          "key": "operationType",
                          "value": "TRANSACTION",
                          "disabled": true
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Get Timeline && Detail OK Case Filter By Event ONBOARDING",
              "item": [
                {
                  "name": "GET Timeline - OK Filter By Event ONBOARDING",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "var maxNumberOfTries = 4;\r",
                          "var timeout = 3000;\r",
                          "var responseOperationType = jsonResponse.operationList[0].operationType;\r",
                          "\r",
                          "if (!pm.environment.get(\"collection_tries\")) {\r",
                          "    pm.environment.set(\"collection_tries\", 1);\r",
                          "}\r",
                          "\r",
                          "if(pm.environment.get(\"collection_tries\") < maxNumberOfTries && responseOperationType != \"ONBOARDING\" || pm.response.code != 200){\r",
                          "   var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);\r",
                          "    pm.environment.set(\"collection_tries\", tries + 1);\r",
                          "    setTimeout(() => {\r",
                          "        postman.setNextRequest(pm.info.requestName)\r",
                          "        }, timeout);\r",
                          "} else {\r",
                          "    pm.environment.unset(\"collection_tries\");\r",
                          "}\r",
                          "\r",
                          "pm.test(\"Timeline - Happy case - Get Timeline with filter by event: ONBOARDING - expect res status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Timeline - Happy case - Get Timeline with filter by event: ONBOARDING - expect operation list to have one element and  operationType field in response to be equal: ONBOARDING\", function () {\r",
                          "    let jsonResponse = pm.response.json()\r",
                          "    pm.expect(jsonResponse.operationList.length).equals(1);\r",
                          "    pm.expect(jsonResponse.operationList[0].operationType).equals('ONBOARDING');\r",
                          "    pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId}}/?page=0&operationType=ONBOARDING&size=10",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "idpay",
                        "timeline",
                        "{{initiativeId}}",
                        ""
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "operationType",
                          "value": "ONBOARDING"
                        },
                        {
                          "key": "size",
                          "value": "10"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GET Timeline Detail ONBOARDING",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "var maxNumberOfTries = 4;\r",
                          "var timeout = 3000;\r",
                          "var responseOperationType = jsonResponse.operationType;\r",
                          "\r",
                          "if (!pm.environment.get(\"collection_tries\")) {\r",
                          "    pm.environment.set(\"collection_tries\", 1);\r",
                          "}\r",
                          "\r",
                          "if(pm.environment.get(\"collection_tries\") < maxNumberOfTries && responseOperationType != \"ONBOARDING\" || pm.response.code != 200){\r",
                          "   var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);\r",
                          "    pm.environment.set(\"collection_tries\", tries + 1);\r",
                          "    setTimeout(() => {\r",
                          "        postman.setNextRequest(pm.info.requestName)\r",
                          "        }, timeout);\r",
                          "} else {\r",
                          "    pm.environment.unset(\"collection_tries\");\r",
                          "}\r",
                          "\r",
                          "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operationType ONBOARDING - expect res status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operationType ONBOARDING - expect operationType ONBOARDING\", function () {\r",
                          "    pm.expect(jsonResponse.operationType).equals('ONBOARDING');\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId}}/{{operationId}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "idpay",
                        "timeline",
                        "{{initiativeId}}",
                        "{{operationId}}"
                      ],
                      "query": [
                        {
                          "key": "operationType",
                          "value": "TRANSACTION",
                          "disabled": true
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Get Timeline && Detail OK Case Filter By Event User SUSPENDED",
              "item": [
                {
                  "name": "GET Timeline - OK Filter By Event user SUSPENDED",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "var maxNumberOfTries = 4;\r",
                          "var timeout = 3000;\r",
                          "var responseOperationType = jsonResponse.operationList[0].operationType;\r",
                          "\r",
                          "if (!pm.environment.get(\"collection_tries\")) {\r",
                          "    pm.environment.set(\"collection_tries\", 1);\r",
                          "}\r",
                          "\r",
                          "if(pm.environment.get(\"collection_tries\") < maxNumberOfTries && responseOperationType != \"SUSPENDED\" || pm.response.code != 200){\r",
                          "   var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);\r",
                          "    pm.environment.set(\"collection_tries\", tries + 1);\r",
                          "    setTimeout(() => {\r",
                          "        postman.setNextRequest(pm.info.requestName)\r",
                          "        }, timeout);\r",
                          "} else {\r",
                          "    pm.environment.unset(\"collection_tries\");\r",
                          "}\r",
                          "\r",
                          "pm.test(\"Timeline - Happy case - Get Timeline with filter by event: SUSPENDED - expect res status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Timeline - Happy case - Get Timeline with filter by event: SUSPENDED - expect operation list to have one element and  operationType field in response to be equal: SUSPENDED\", function () {\r",
                          "    pm.expect(jsonResponse.operationList.length).equals(1);\r",
                          "    pm.expect(jsonResponse.operationList[0].operationType).equals('SUSPENDED');\r",
                          "    pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId}}/?page=0&operationType=SUSPENDED&size=10",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "idpay",
                        "timeline",
                        "{{initiativeId}}",
                        ""
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "operationType",
                          "value": "SUSPENDED"
                        },
                        {
                          "key": "size",
                          "value": "10"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GET Timeline Detail SUSPENDED",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "var maxNumberOfTries = 4;\r",
                          "var timeout = 3000;\r",
                          "var responseOperationType = jsonResponse.operationType;\r",
                          "\r",
                          "if (!pm.environment.get(\"collection_tries\")) {\r",
                          "    pm.environment.set(\"collection_tries\", 1);\r",
                          "}\r",
                          "\r",
                          "if(pm.environment.get(\"collection_tries\") < maxNumberOfTries && responseOperationType != \"SUSPENDED\" || pm.response.code != 200){\r",
                          "   var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);\r",
                          "    pm.environment.set(\"collection_tries\", tries + 1);\r",
                          "    setTimeout(() => {\r",
                          "        postman.setNextRequest(pm.info.requestName)\r",
                          "        }, timeout);\r",
                          "} else {\r",
                          "    pm.environment.unset(\"collection_tries\");\r",
                          "}\r",
                          "\r",
                          "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect res status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect operationType SUSPENDED\", function () {\r",
                          "    let jsonResponse = pm.response.json()\r",
                          "   pm.expect(jsonResponse.operationType).equals('SUSPENDED');\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId}}/{{operationId}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "idpay",
                        "timeline",
                        "{{initiativeId}}",
                        "{{operationId}}"
                      ],
                      "query": [
                        {
                          "key": "operationType",
                          "value": "TRANSACTION",
                          "disabled": true
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Get Timeline && Detail OK Case Filter By Event User READMITTED",
              "item": [
                {
                  "name": "GET Timeline - OK Filter By Event user READMITTED",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "var maxNumberOfTries = 4;\r",
                          "var timeout = 3000;\r",
                          "var responseOperationType = jsonResponse.operationList[0].operationType;\r",
                          "\r",
                          "if (!pm.environment.get(\"collection_tries\")) {\r",
                          "    pm.environment.set(\"collection_tries\", 1);\r",
                          "}\r",
                          "\r",
                          "if(pm.environment.get(\"collection_tries\") < maxNumberOfTries && responseOperationType != \"READMITTED\" || pm.response.code != 200){\r",
                          "   var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);\r",
                          "    pm.environment.set(\"collection_tries\", tries + 1);\r",
                          "    setTimeout(() => {\r",
                          "        postman.setNextRequest(pm.info.requestName)\r",
                          "        }, timeout);\r",
                          "} else {\r",
                          "    pm.environment.unset(\"collection_tries\");\r",
                          "}\r",
                          "\r",
                          "pm.test(\"Timeline - Happy case - Get Timeline with filter by event: READMITTED - expect res status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Timeline - Happy case - Get Timeline with filter by event: READMITTED - expect operation list to have one element and  operationType field in response to be equal: READMITTED\", function () {\r",
                          "    pm.expect(jsonResponse.operationList.length).equals(1);\r",
                          "    pm.expect(jsonResponse.operationList[0].operationType).equals('READMITTED');\r",
                          "    pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId}}/?page=0&operationType=READMITTED&size=10",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "idpay",
                        "timeline",
                        "{{initiativeId}}",
                        ""
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "operationType",
                          "value": "READMITTED"
                        },
                        {
                          "key": "size",
                          "value": "10"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GET Timeline Detail READMITTED",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "var maxNumberOfTries = 4;\r",
                          "var timeout = 3000;\r",
                          "var responseOperationType = jsonResponse.operationType;\r",
                          "\r",
                          "if (!pm.environment.get(\"collection_tries\")) {\r",
                          "    pm.environment.set(\"collection_tries\", 1);\r",
                          "}\r",
                          "\r",
                          "if(pm.environment.get(\"collection_tries\") < maxNumberOfTries && responseOperationType != \"READMITTED\" || pm.response.code != 200){\r",
                          "   var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);\r",
                          "    pm.environment.set(\"collection_tries\", tries + 1);\r",
                          "    setTimeout(() => {\r",
                          "        postman.setNextRequest(pm.info.requestName)\r",
                          "        }, timeout);\r",
                          "} else {\r",
                          "    pm.environment.unset(\"collection_tries\");\r",
                          "}\r",
                          "\r",
                          "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect res status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect operationType READMITTED\", function () {\r",
                          "    pm.expect(jsonResponse.operationType).equals('READMITTED');\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId}}/{{operationId}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "idpay",
                        "timeline",
                        "{{initiativeId}}",
                        "{{operationId}}"
                      ],
                      "query": [
                        {
                          "key": "operationType",
                          "value": "TRANSACTION",
                          "disabled": true
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Get Timeline && Detail OK Case Filter By Event User UNSUBSCRIBED",
              "item": [
                {
                  "name": "GET Timeline - OK Filter By Event user UNSUBSCRIBED",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "var maxNumberOfTries = 4;\r",
                          "var timeout = 3000;\r",
                          "var responseOperationType = jsonResponse.operationList[0].operationType;\r",
                          "\r",
                          "if (!pm.environment.get(\"collection_tries\")) {\r",
                          "    pm.environment.set(\"collection_tries\", 1);\r",
                          "}\r",
                          "\r",
                          "if(pm.environment.get(\"collection_tries\") < maxNumberOfTries && responseOperationType != \"UNSUBSCRIBED\" || pm.response.code != 200){\r",
                          "   var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);\r",
                          "    pm.environment.set(\"collection_tries\", tries + 1);\r",
                          "    setTimeout(() => {\r",
                          "        postman.setNextRequest(pm.info.requestName)\r",
                          "        }, timeout);\r",
                          "} else {\r",
                          "    pm.environment.unset(\"collection_tries\");\r",
                          "}\r",
                          "\r",
                          "pm.test(\"Timeline - Happy case - Get Timeline with filter by event: UNSUBSCRIBED - expect res status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Timeline - Happy case - Get Timeline with filter by event: UNSUBSCRIBED - expect operation list to have one element and  operationType field in response to be equal:UNSUBSCRIBED\", function () {\r",
                          "    pm.expect(jsonResponse.operationList.length).equals(1);\r",
                          "    pm.expect(jsonResponse.operationList[0].operationType).equals('UNSUBSCRIBED');\r",
                          "    pm.collectionVariables.set(\"operationId\", jsonResponse.operationList[0].operationId);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId}}/?page=0&operationType=UNSUBSCRIBED&size=10",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "idpay",
                        "timeline",
                        "{{initiativeId}}",
                        ""
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "operationType",
                          "value": "UNSUBSCRIBED"
                        },
                        {
                          "key": "size",
                          "value": "10"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GET Timeline Detail UNSUBSCRIBED",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "var maxNumberOfTries = 4;\r",
                          "var timeout = 3000;\r",
                          "var responseOperationType = jsonResponse.operationType;\r",
                          "\r",
                          "if (!pm.environment.get(\"collection_tries\")) {\r",
                          "    pm.environment.set(\"collection_tries\", 1);\r",
                          "}\r",
                          "\r",
                          "if(pm.environment.get(\"collection_tries\") < maxNumberOfTries && responseOperationType != \"UNSUBSCRIBED\" || pm.response.code != 200){\r",
                          "   var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);\r",
                          "    pm.environment.set(\"collection_tries\", tries + 1);\r",
                          "    setTimeout(() => {\r",
                          "        postman.setNextRequest(pm.info.requestName)\r",
                          "        }, timeout);\r",
                          "} else {\r",
                          "    pm.environment.unset(\"collection_tries\");\r",
                          "}\r",
                          "\r",
                          "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect res status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for IDPAYCODE - expect operationType UNSUBSCRIBED\", function () {\r",
                          "    let jsonResponse = pm.response.json()\r",
                          "    pm.expect(jsonResponse.operationType).equals('UNSUBSCRIBED');\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId}}/{{operationId}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "idpay",
                        "timeline",
                        "{{initiativeId}}",
                        "{{operationId}}"
                      ],
                      "query": [
                        {
                          "key": "operationType",
                          "value": "TRANSACTION",
                          "disabled": true
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Get Timeline OK Case Filter By DateFrom (existing Date)",
              "item": [
                {
                  "name": "GET Timeline - OK Filter By DateFrom (existing Date)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "var maxNumberOfTries = 4;\r",
                          "var timeout = 3000;\r",
                          "var operationList = jsonResponse.operationList.length;\r",
                          "\r",
                          "if (!pm.environment.get(\"collection_tries\")) {\r",
                          "    pm.environment.set(\"collection_tries\", 1);\r",
                          "}\r",
                          "\r",
                          "if(pm.environment.get(\"collection_tries\") < maxNumberOfTries && operationList < 5 || pm.response.code != 200){\r",
                          "   var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);\r",
                          "    pm.environment.set(\"collection_tries\", tries + 1);\r",
                          "    setTimeout(() => {\r",
                          "        postman.setNextRequest(pm.info.requestName)\r",
                          "        }, timeout);\r",
                          "} else {\r",
                          "    pm.environment.unset(\"collection_tries\");\r",
                          "}\r",
                          "\r",
                          "pm.test(\"Timeline - Happy case - Get Timeline with filter by DateFrom - with a real date - expect res status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Timeline - Happy case - Get Timeline with filter by DateFrom - expect field operationList to have 5 events that have date from the filter\", function () {\r",
                          "    pm.expect(jsonResponse.operationList.length).equals(5);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let moment = require('moment');\r",
                          "let today = String(moment().format(\"yyyy-MM-DD\")).concat(\"T00%3A00%3A00Z\");\r",
                          "\r",
                          "pm.collectionVariables.set(\"dateFrom\", today);\r",
                          "\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId}}/?page=0&size=10&dateFrom={{dateFrom}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "idpay",
                        "timeline",
                        "{{initiativeId}}",
                        ""
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "10"
                        },
                        {
                          "key": "dateFrom",
                          "value": "{{dateFrom}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Get Timeline OK Case Filter By DateTo (existing Date)",
              "item": [
                {
                  "name": "GET Timeline - OK Filter By DateTo (existing Date)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "var maxNumberOfTries = 4;\r",
                          "var timeout = 3000;\r",
                          "var operationList = jsonResponse.operationList.length;\r",
                          "\r",
                          "if (!pm.environment.get(\"collection_tries\")) {\r",
                          "    pm.environment.set(\"collection_tries\", 1);\r",
                          "}\r",
                          "\r",
                          "if(pm.environment.get(\"collection_tries\") < maxNumberOfTries && operationList < 5 || pm.response.code != 200){\r",
                          "   var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);\r",
                          "    pm.environment.set(\"collection_tries\", tries + 1);\r",
                          "    setTimeout(() => {\r",
                          "        postman.setNextRequest(pm.info.requestName)\r",
                          "        }, timeout);\r",
                          "} else {\r",
                          "    pm.environment.unset(\"collection_tries\");\r",
                          "}\r",
                          "\r",
                          "pm.test(\"Timeline - Happy case - Get Timeline - Filter by DateTo - with a real date - expect res status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Timeline - Happy case - Get Timeline - Filter by DateTo - with a real date - expect field operationList to have 5 events\", function () {\r",
                          "    pm.expect(jsonResponse.operationList.length).equals(5);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let moment = require('moment');\r",
                          "let todayP3 = String(moment().add(3,'months').format(\"yyyy-MM-DD\")).concat(\"T00%3A00%3A00Z\");\r",
                          "\r",
                          "pm.collectionVariables.set(\"dateTo\", todayP3);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId}}/?page=0&size=10&dateTo={{dateTo}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "idpay",
                        "timeline",
                        "{{initiativeId}}",
                        ""
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "10"
                        },
                        {
                          "key": "dateTo",
                          "value": "{{dateTo}}"
                        },
                        {
                          "key": null,
                          "value": "",
                          "disabled": true
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Get Timeline OK Case Filter By Date From and DateTo (existing Dates)",
              "item": [
                {
                  "name": "Get Timeline OK Case Filter By Date From and DateTo (existing Dates)",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "var maxNumberOfTries = 4;\r",
                          "var timeout = 3000;\r",
                          "var operationList = jsonResponse.operationList.length;\r",
                          "\r",
                          "if (!pm.environment.get(\"collection_tries\")) {\r",
                          "    pm.environment.set(\"collection_tries\", 1);\r",
                          "}\r",
                          "\r",
                          "if(pm.environment.get(\"collection_tries\") < maxNumberOfTries && operationList < 5 || pm.response.code != 200){\r",
                          "   var tries = parseInt(pm.environment.get(\"collection_tries\"), 10);\r",
                          "    pm.environment.set(\"collection_tries\", tries + 1);\r",
                          "    setTimeout(() => {\r",
                          "        postman.setNextRequest(pm.info.requestName)\r",
                          "        }, timeout);\r",
                          "} else {\r",
                          "    pm.environment.unset(\"collection_tries\");\r",
                          "}\r",
                          "\r",
                          "pm.test(\"Timeline - Happy case - Get Timeline - Filter by DateFrom and DateTo - with a real date - expect res status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Timeline - Happy case - Get Timeline with filter by DateFrom and DateTo - with a real date - expect field operationList to have 5 events\", function () {\r",
                          "    let jsonResponse = pm.response.json()\r",
                          "    pm.expect(jsonResponse.operationList.length).equals(5);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId}}/?page=0&size=10&dateFrom={{dateFrom}}&dateTo={{dateTo}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "idpay",
                        "timeline",
                        "{{initiativeId}}",
                        ""
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "operationType",
                          "value": "DELETE_INSTRUMENT",
                          "disabled": true
                        },
                        {
                          "key": "size",
                          "value": "10"
                        },
                        {
                          "key": "dateFrom",
                          "value": "{{dateFrom}}"
                        },
                        {
                          "key": "dateTo",
                          "value": "{{dateTo}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        },
        {
          "name": "Unhappy Case",
          "item": [
            {
              "name": "Timeline Not Found for current user",
              "item": [
                {
                  "name": "Generate Token IO Copy",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Timeline - Happy case - Get Timeline empty list with not valid CF - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{genericSubscriptionKey}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_2}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "rtd",
                        "mock-io",
                        "login"
                      ],
                      "query": [
                        {
                          "key": "fiscalCode",
                          "value": "{{CF_2}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GET Timeline - OK Without filter",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Timeline - Unhappy case - Get Timeline without filter - expect res status 404\", function () {\r",
                          "    pm.response.to.have.status(404);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Timeline - Unhappy case - Get Timeline without filter  - expect code TIMELINE_USER_NOT_FOUND\", function () {\r",
                          "    let jsonResponse = pm.response.json()\r",
                          "    pm.expect(jsonResponse.code).equals(\"TIMELINE_USER_NOT_FOUND\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "setTimeout(() => {}, 5000);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId}}/?page=0&size=10",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "idpay",
                        "timeline",
                        "{{initiativeId}}",
                        ""
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "10"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Timeline Detail Not found",
              "item": [
                {
                  "name": "GET Timeline Detail",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Timeline Detail - Unhappy case - Get Timeline Detail- - expect res status 404\", function () {\r",
                          "    pm.response.to.have.status(404);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Timeline Detail - Unhappy case - Get Timeline Detail - expect code TIMELINE_DETAIL_NOT_FOUND\", function () {\r",
                          "    let jsonResponse = pm.response.json()\r",
                          "    pm.expect(jsonResponse.code).equals('TIMELINE_DETAIL_NOT_FOUND');\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "setTimeout(() => {}, 8000);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/timeline/:initiativeIdFake/{{operationId}}",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "idpay",
                        "timeline",
                        ":initiativeIdFake",
                        "{{operationId}}"
                      ],
                      "variable": [
                        {
                          "key": "initiativeIdFake",
                          "value": "\"\""
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        },
        {
          "name": "Delete Initiative",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Payment - Happy Case - Delete Initiative - Status test 204\", function () {\r",
                  "    pm.response.to.have.status(204);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
              "host": [
                "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
              ],
              "path": [
                "idpay",
                "initiative",
                "{{initiativeId}}"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{tokenIO}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "tokenIO",
      "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X3VzZXIiLCJpYXQiOjE2NTc4MDUyNjYsImV4cCI6MTY1NzgwODg2Nn0.5TdayX1X9lrIJVJ5p3DHqt4hBd2zVyuYCtPG-Kwffds"
    },
    {
      "key": "Ocp-Apim-Trace",
      "value": "true"
    },
    {
      "key": "test cf",
      "value": "test_Fake_User"
    },
    {
      "key": "initiativeId timeline",
      "value": "63fdd546fea3f35a5644e735"
    },
    {
      "key": "transaction-op-id",
      "value": ""
    },
    {
      "key": "reversal-op-id",
      "value": ""
    },
    {
      "key": "add_instrument-op-id",
      "value": ""
    },
    {
      "key": "delete_instrument-op-id",
      "value": ""
    },
    {
      "key": "add_iban-op-id",
      "value": ""
    },
    {
      "key": "onboarding-op-id",
      "value": ""
    },
    {
      "key": "paid_refund-op-id",
      "value": ""
    },
    {
      "key": "rejected_refund-op-id",
      "value": ""
    },
    {
      "key": "initiativeId_discount",
      "value": "649ee68ef604477a2463f8a0",
      "type": "string"
    },
    {
      "key": "identityPortalToken",
      "value": ""
    },
    {
      "key": "serviceName",
      "value": ""
    },
    {
      "key": "description",
      "value": ""
    },
    {
      "key": "channel_type",
      "value": ""
    },
    {
      "key": "channel_contact",
      "value": ""
    },
    {
      "key": "budget",
      "value": ""
    },
    {
      "key": "beneficiaryType",
      "value": ""
    },
    {
      "key": "beneficiaryKnown",
      "value": ""
    },
    {
      "key": "rankingEnabled",
      "value": ""
    },
    {
      "key": "beneficiaryBudget",
      "value": ""
    },
    {
      "key": "rankingStartDate",
      "value": ""
    },
    {
      "key": "rankingEndDate",
      "value": ""
    },
    {
      "key": "startDate",
      "value": ""
    },
    {
      "key": "endDate",
      "value": ""
    },
    {
      "key": "rewardRuleType",
      "value": ""
    },
    {
      "key": "rewardValueType",
      "value": ""
    },
    {
      "key": "rewardRuleValue",
      "value": ""
    },
    {
      "key": "trxDaysOfWeek",
      "value": ""
    },
    {
      "key": "trxDayEndTime",
      "value": ""
    },
    {
      "key": "trxThresholdFrom",
      "value": ""
    },
    {
      "key": "trxThresholdTo",
      "value": ""
    },
    {
      "key": "trxCountFrom",
      "value": ""
    },
    {
      "key": "trxCountTo",
      "value": ""
    },
    {
      "key": "trxRewardLimitFrequency",
      "value": ""
    },
    {
      "key": "trxRewardLimitValue",
      "value": ""
    },
    {
      "key": "identityPortalTokenPagopa",
      "value": ""
    },
    {
      "key": "merchantId",
      "value": ""
    },
    {
      "key": "merchantPortalToken",
      "value": ""
    },
    {
      "key": "trxDate",
      "value": ""
    },
    {
      "key": "randomNum",
      "value": ""
    },
    {
      "key": "trxCode",
      "value": ""
    },
    {
      "key": "transactionId",
      "value": ""
    },
    {
      "key": "effectiveAmount",
      "value": ""
    },
    {
      "key": "rewardAmount",
      "value": ""
    },
    {
      "key": "transaction-op-id-cancelled",
      "value": ""
    },
    {
      "key": "transaction-op-id-authorized",
      "value": ""
    },
    {
      "key": "transaction-op-id-rewarded",
      "value": ""
    },
    {
      "key": "CF_fake",
      "value": "RNZPMP80A44X000M",
      "type": "string"
    },
    {
      "key": "instrumentId",
      "value": ""
    },
    {
      "key": "initiativeId",
      "value": ""
    },
    {
      "key": "merchantFiscalCode",
      "value": ""
    },
    {
      "key": "dateFrom",
      "value": ""
    },
    {
      "key": "dateTo",
      "value": ""
    },
    {
      "key": "operationId",
      "value": ""
    },
    {
      "key": "idpayCode-instrumentId",
      "value": ""
    }
  ]
}