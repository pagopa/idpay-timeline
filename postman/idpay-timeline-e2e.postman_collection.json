{
  "info": {
    "_postman_id": "d607ca35-b5e1-4fc0-acea-53e47b393bc3",
    "name": "Timeline - e2e",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "25824330",
    "_collection_link": "https://idpay-test-funzionali.postman.co/workspace/IDPay-Test-Funzionali~d5f80577-ab5d-4d50-87c4-a81b6bcba6bc/collection/26036679-d607ca35-b5e1-4fc0-acea-53e47b393bc3?action=share&source=collection_link&creator=25824330"
  },
  "item": [
    {
      "name": "Happy Case",
      "item": [
        {
          "name": "Get Timeline OK Case Full List with valid CF",
          "item": [
            {
              "name": "Generate Token IO",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Timeline - Happy case- Get Timeline Full List with valid CF - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                      "    //verify response HTTP status \r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key",
                    "value": "{{genericSubscriptionKey}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_1}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["rtd", "mock-io", "login"],
                  "query": [
                    {
                      "key": "fiscalCode",
                      "value": "{{CF_1}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GET Timeline - OK Full List",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy case - Get Timeline full list with valid CF - res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Happy case - Get Timeline full list with not valid CF - size = 10, page = 0, expect response full list\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationList.length).equals(10);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&size=10",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "operationType",
                      "value": "TRANSACTION",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline OK Case Filter By Event TRANSACTION",
          "item": [
            {
              "name": "GET Timeline - OK Filter By Event TRANSACTION",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy case - Get Timeline with filter by event: TRANSACTION - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Happy case - Get Timeline with filter by event: TRANSACTION - expect operation list to have one element and  operationType field in response to be equal: TRANSACTION\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationList.length).equals(1);\r",
                      "    pm.expect(jsonResponse.operationList[0].operationType).equals('TRANSACTION');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&operationType=TRANSACTION&size=10",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "operationType",
                      "value": "TRANSACTION"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline OK Case Filter By Event PAID_REFUND",
          "item": [
            {
              "name": "GET Timeline - OK Filter By Event PAID_REFUND",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy case - Get Timeline with filter by event: PAID_REFUND - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Happy case - Get Timeline with filter by event: PAID_REFUND - expect operation list to have one element and  operationType field in response to be equal: PAID_REFUND\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationList.length).equals(1);\r",
                      "    pm.expect(jsonResponse.operationList[0].operationType).equals('PAID_REFUND');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&operationType=PAID_REFUND&size=10",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "operationType",
                      "value": "PAID_REFUND"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline OK Case Filter By Event ADD_INSTRUMENT",
          "item": [
            {
              "name": "GET Timeline - OK Filter By Event ADD_INSTRUMENT",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy case - Get Timeline with filter by event: ADD_INSTRUMENT - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Happy case - Get Timeline with filter by event: ADD_INSTRUMENT - expect operation list to have one element and  operationType field in response to be equal: ADD_INSTRUMENT\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationList.length).equals(1);\r",
                      "    pm.expect(jsonResponse.operationList[0].operationType).equals('ADD_INSTRUMENT');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&operationType=ADD_INSTRUMENT&size=10",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "operationType",
                      "value": "ADD_INSTRUMENT"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline OK Case Filter By Event DELETE_INSTRUMENT",
          "item": [
            {
              "name": "GET Timeline - OK Filter By Event DELETE_INSTRUMENT",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy case - Get Timeline with filter by event: DELETE_INSTRUMENT - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Happy case - Get Timeline with filter by event: DELETE_INSTRUMENT - expect operation list to have one element and  operationType field in response to be equal: DELETE_INSTRUMENT\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationList.length).equals(1);\r",
                      "    pm.expect(jsonResponse.operationList[0].operationType).equals('DELETE_INSTRUMENT');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&operationType=DELETE_INSTRUMENT&size=10",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "operationType",
                      "value": "DELETE_INSTRUMENT"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline OK Case Filter By Event ADD_IBAN",
          "item": [
            {
              "name": "GET Timeline - OK Filter By Event ADD_IBAN",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy case - Get Timeline with filter by event: ADD_IBAN - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Timeline - Happy case - Get Timeline with filter by event: ADD_IBAN - expect operation list to have one element and  operationType field in response to be equal: ADD_IBAN\", function () {\r",
                      "    let jsonResponse = pm.response.json();\r",
                      "    pm.expect(jsonResponse.operationList.length).equals(1);\r",
                      "    pm.expect(jsonResponse.operationList[0].operationType).equals('ADD_IBAN');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&operationType=ADD_IBAN&size=10",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "operationType",
                      "value": "ADD_IBAN"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline OK Case Filter By Event ONBOARDING",
          "item": [
            {
              "name": "GET Timeline - OK Filter By Event ONBOARDING",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy case - Get Timeline with filter by event: ONBOARDING - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Happy case - Get Timeline with filter by event: ONBOARDING - expect operation list to have one element and  operationType field in response to be equal: ONBOARDING\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationList.length).equals(1);\r",
                      "    pm.expect(jsonResponse.operationList[0].operationType).equals('ONBOARDING');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&operationType=ONBOARDING&size=10",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "operationType",
                      "value": "ONBOARDING"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline OK Case Filter By DateFrom (not existing Date)",
          "item": [
            {
              "name": "GET Timeline - OK Filter By DateFrom (not existing Date)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy case - Get Timeline with filter by DateFrom - with a fake date - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Happy case - Get Timeline with filter by DateFrom - with a fake date - expect field operationList to be empty\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationList.length).equals(0);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&size=10&dateFrom=2023-07-01T00%3A00%3A00Z",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "operationType",
                      "value": "DELETE_INSTRUMENT",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "10"
                    },
                    {
                      "key": "dateFrom",
                      "value": "2023-07-01T00%3A00%3A00Z"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline OK Case Filter By DateFrom (existing Date)",
          "item": [
            {
              "name": "GET Timeline - OK Filter By DateFrom (existing Date)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy case - Get Timeline with filter by DateFrom - with a real date - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Happy case - Get Timeline with filter by DateFrom - expect field operationList to have 4 events that have date from the filter\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationList.length).equals(4);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&size=10&dateFrom=2023-03-01T00%3A00%3A00Z",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "operationType",
                      "value": "DELETE_INSTRUMENT",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "10"
                    },
                    {
                      "key": "dateFrom",
                      "value": "2023-03-01T00%3A00%3A00Z"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline OK Case Filter By Event TRANSACTION And DateFrom (existing Date)",
          "item": [
            {
              "name": "Get Timeline OK Case Filter By Event TRANSACTION And DateFrom (existing Date)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy case - Get Timeline with filter by Event TRANSACTION and DateFrom - with a real date - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Happy case - Get Timeline with filter by Event TRANSACTION and DateFrom - with a real date - expect field operationList to have 1 event with the type TRANSACTION\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationList.length).equals(1);\r",
                      "    pm.expect(jsonResponse.operationList[0].operationType).equals(\"TRANSACTION\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&operationType=TRANSACTION&size=10&dateFrom=2023-03-01T00%3A00%3A00Z",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "operationType",
                      "value": "TRANSACTION"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    },
                    {
                      "key": "dateFrom",
                      "value": "2023-03-01T00%3A00%3A00Z"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline OK Case Filter By DateTo (existing Date)",
          "item": [
            {
              "name": "GET Timeline - OK Filter By DateTo (existing Date)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy case - Get Timeline - Filter by DateTo - with a real date - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Happy case - Get Timeline - Filter by DateTo - with a real date - expect field operationList to have 10 events\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationList.length).equals(10);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&size=10&dateTo=2023-05-01T00%3A00%3A00Z",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "operationType",
                      "value": "DELETE_INSTRUMENT",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "10"
                    },
                    {
                      "key": "dateTo",
                      "value": "2023-05-01T00%3A00%3A00Z"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline OK Case Filter By DateTo (not existing Date)",
          "item": [
            {
              "name": "Get Timeline OK Case Filter By DateTo (not existing Date)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy case - Get Timeline - Filter by DateTo - with a fake date - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Happy case - Get Timeline with filter by Event TRANSACTION and DateTo - with a fake date - expect field operationList to have 0 events\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationList.length).equals(0);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["pm.variables.replaceIn(\"{{$randomUserName}}\")"],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&size=10&dateTo=2023-02-01T00%3A00%3A00Z",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "operationType",
                      "value": "DELETE_INSTRUMENT",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "10"
                    },
                    {
                      "key": "dateTo",
                      "value": "2023-02-01T00%3A00%3A00Z"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline OK Case Filter By Date From and DateTo (existing Dates)",
          "item": [
            {
              "name": "Get Timeline OK Case Filter By Date From and DateTo (existing Dates)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy case - Get Timeline - Filter by DateFrom and DateTo - with a real date - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Happy case - Get Timeline with filter by DateFrom and DateTo - with a real date - expect field operationList to have 4 events\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationList.length).equals(4);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&size=10&dateFrom=2023-03-01T00%3A00%3A00Z&dateTo=2023-05-01T00%3A00%3A00Z",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "operationType",
                      "value": "DELETE_INSTRUMENT",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "10"
                    },
                    {
                      "key": "dateFrom",
                      "value": "2023-03-01T00%3A00%3A00Z"
                    },
                    {
                      "key": "dateTo",
                      "value": "2023-05-01T00%3A00%3A00Z"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline OK [wrong page number filter]",
          "item": [
            {
              "name": "GET Timeline - OK Empty List Copy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy case - Get Timeline - Filter by page number - with a not existing page number - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Happy case - Get Timeline with filter by page number - with a not existing page number - expect field operationList to have 0 events\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationList.length).equals(0);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=2&size=10",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "operationType",
                      "value": "TRANSACTION",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "2"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline Detail Rejected_Add_Instrument",
          "item": [
            {
              "name": "GET Timeline Detail - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for Rejected_Add_Instrument - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for Rejected_Add_Instrument - expect in response operationType to be Rejected_Add_Instrument\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationType).equals('REJECTED_ADD_INSTRUMENT');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/63fe098801e27d382f80bc8a",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    "63fe098801e27d382f80bc8a"
                  ],
                  "query": [
                    {
                      "key": "operationType",
                      "value": "TRANSACTION",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline Detail Rejected_Delete_Instrument",
          "item": [
            {
              "name": "GET Timeline Detail - OK Copy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for REJECTED_DELETE_INSTRUMENT - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for REJECTED_DELETE_INSTRUMENT - expect in response operationType to be REJECTED_DELETE_INSTRUMENT\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationType).equals('REJECTED_DELETE_INSTRUMENT');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/63fe099901e27d382f80bc8b",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    "63fe099901e27d382f80bc8b"
                  ],
                  "query": [
                    {
                      "key": "operationType",
                      "value": "TRANSACTION",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline Detail Transaction",
          "item": [
            {
              "name": "GET Timeline - OK Filter By Event TRANSACTION",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy case - Get Timeline - Filter by operationType for TRANSACTION - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Happy case - Get Timeline with filter by operationType for TRANSACTION - expect field operationList to have 1 event and operationType to be TRANSACTION  \", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationList.length).equals(1);\r",
                      "    pm.expect(jsonResponse.operationList[0].operationType).equals('TRANSACTION');\r",
                      "    pm.collectionVariables.set(\"transaction-op-id\", jsonResponse.operationList[0].operationId);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&operationType=TRANSACTION&size=10",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "operationType",
                      "value": "TRANSACTION"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GET Timeline Detail - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for TRANSACTION - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for Rejected_Add_Instrument - expect operationType to be TRANSACTION\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationType).equals('TRANSACTION');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/{{transaction-op-id}}",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    "{{transaction-op-id}}"
                  ],
                  "query": [
                    {
                      "key": "operationType",
                      "value": "TRANSACTION",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline Detail Reversal",
          "item": [
            {
              "name": "GET Timeline - OK Filter By Event REVERSAL",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy case - Get Timeline - Filter by operation Type for REVERSAL - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Happy case - Get Timeline - Filter by operation ID for REVERSAL - expect operation list to have one event and operationType to be REVERSAL\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationList.length).equals(1);\r",
                      "    pm.expect(jsonResponse.operationList[0].operationType).equals('REVERSAL');\r",
                      "    pm.collectionVariables.set(\"reversal-op-id\", jsonResponse.operationList[0].operationId);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&operationType=REVERSAL&size=10",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "operationType",
                      "value": "REVERSAL"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GET Timeline Detail - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for REVERSAL - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for REVERSAL - expect operationType to be REVERSAL\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationType).equals('REVERSAL');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/{{reversal-op-id}}",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    "{{reversal-op-id}}"
                  ],
                  "query": [
                    {
                      "key": "operationType",
                      "value": "TRANSACTION",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline Detail Add_Instrument",
          "item": [
            {
              "name": "GET Timeline - OK Filter By Event ADD_INSTRUMENT",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy case - Get Timeline - Filter by operation Type for ADD_INSTRUMENT - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Happy case - Get Timeline - Filter by operation ID for ADD_INSTRUMENT - expect operation list to have one event and operationType to be ADD_INSTRUMENT\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationList.length).equals(1);\r",
                      "    pm.expect(jsonResponse.operationList[0].operationType).equals('ADD_INSTRUMENT');\r",
                      "    pm.collectionVariables.set(\"add_instrument-op-id\", jsonResponse.operationList[0].operationId);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&operationType=ADD_INSTRUMENT&size=10",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "operationType",
                      "value": "ADD_INSTRUMENT"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GET Timeline Detail - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for ADD_INSTRUMENT - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for ADD_INSTRUMENT - expect operationType to be ADD_INSTRUMENT\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationType).equals('ADD_INSTRUMENT');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/63fddfe5d5e50d32983d5d53",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    "63fddfe5d5e50d32983d5d53"
                  ],
                  "query": [
                    {
                      "key": "operationType",
                      "value": "TRANSACTION",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline Detail Delete_Instrument",
          "item": [
            {
              "name": "GET Timeline - OK Filter By Event DELETE_INSTRUMENT",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy case - Get Timeline - Filter by operation Type for DELETE_INSTRUMENT - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Happy case - Get Timeline - Filter by operation ID for DELETE_INSTRUMENT - expect operation list to have one event and operationType to be DELETE_INSTRUMENT\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationList.length).equals(1);\r",
                      "    pm.expect(jsonResponse.operationList[0].operationType).equals('DELETE_INSTRUMENT');\r",
                      "    pm.collectionVariables.set(\"delete_instrument-op-id\", jsonResponse.operationList[0].operationId);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&operationType=DELETE_INSTRUMENT&size=10",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "operationType",
                      "value": "DELETE_INSTRUMENT"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GET Timeline Detail - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for DELETE_INSTRUMENT - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for DELETE_INSTRUMENT - expect operationType to be DELETE_INSTRUMENT\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationType).equals('DELETE_INSTRUMENT');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/{{delete_instrument-op-id}}",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    "{{delete_instrument-op-id}}"
                  ],
                  "query": [
                    {
                      "key": "operationType",
                      "value": "TRANSACTION",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline Detail Add_Iban",
          "item": [
            {
              "name": "GET Timeline - OK Filter By Event ADD_IBAN",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy case - Get Timeline - Filter by operation Type for ADD_IBAN - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Happy case - Get Timeline - Filter by operation ID for ADD_IBAN - expect operation list to have one event and operationType to be ADD_IBAN\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationList.length).equals(1);\r",
                      "    pm.expect(jsonResponse.operationList[0].operationType).equals('ADD_IBAN');\r",
                      "    pm.collectionVariables.set(\"add_iban-op-id\", jsonResponse.operationList[0].operationId);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&operationType=ADD_IBAN&size=10",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "operationType",
                      "value": "ADD_IBAN"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GET Timeline Detail - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for ADD_IBAN - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for ADD_IBAN - expect operationType to be ADD_IBAN\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationType).equals('ADD_IBAN');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/{{add_iban-op-id}}",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    "{{add_iban-op-id}}"
                  ],
                  "query": [
                    {
                      "key": "operationType",
                      "value": "TRANSACTION",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline Detail Onboarding",
          "item": [
            {
              "name": "GET Timeline - OK Filter By Event ONBOARDING",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy case - Get Timeline - Filter by operation Type for ONBOARDING - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Happy case - Get Timeline - Filter by operation ID for ONBOARDING - expect operation list to have one event and operationType to be ONBOARDING\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationList.length).equals(1);\r",
                      "    pm.expect(jsonResponse.operationList[0].operationType).equals('ONBOARDING');\r",
                      "    pm.collectionVariables.set(\"onboarding-op-id\", jsonResponse.operationList[0].operationId);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&operationType=ONBOARDING&size=10",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "operationType",
                      "value": "ONBOARDING"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GET Timeline Detail - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for ONBOARDING - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for ONBOARDING - expect operationType to be ONBOARDING\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationType).equals('ONBOARDING');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/{{onboarding-op-id}}",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    "{{onboarding-op-id}}"
                  ],
                  "query": [
                    {
                      "key": "operationType",
                      "value": "TRANSACTION",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline Detail Paid_Refund",
          "item": [
            {
              "name": "GET Timeline - OK Filter By Event PAID_REFUND",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy case - Get Timeline - Filter by operation Type for PAID_REFUND - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Happy case - Get Timeline - Filter by operation ID for PAID_REFUND - expect operation list to have one event and operationType to be PAID_REFUND\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationList.length).equals(1);\r",
                      "    pm.expect(jsonResponse.operationList[0].operationType).equals('PAID_REFUND');\r",
                      "    pm.collectionVariables.set(\"paid_refund-op-id\", jsonResponse.operationList[0].operationId);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&operationType=PAID_REFUND&size=10",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "operationType",
                      "value": "PAID_REFUND"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GET Timeline Detail - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for PAID_REFUND - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for PAID_REFUND - expect operationType to be PAID_REFUND\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationType).equals('PAID_REFUND');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/63fe083201e27d382f80bc88",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    "63fe083201e27d382f80bc88"
                  ],
                  "query": [
                    {
                      "key": "operationType",
                      "value": "TRANSACTION",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline Detail REJECTED_Refund",
          "item": [
            {
              "name": "GET Timeline - OK Filter By Event REJECTED_REFUND",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy case - Get Timeline - Filter by operation Type for REJECTED_REFUND - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Happy case - Get Timeline - Filter by operation ID for REJECTED_REFUND - expect operation list to have one event and operationType to be REJECTED_REFUND\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationList.length).equals(1);\r",
                      "    pm.expect(jsonResponse.operationList[0].operationType).equals('REJECTED_REFUND');\r",
                      "    pm.collectionVariables.set(\"rejected_refund-op-id\", jsonResponse.operationList[0].operationId);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&operationType=REJECTED_REFUND&size=10",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "operationType",
                      "value": "REJECTED_REFUND"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GET Timeline Detail - OK",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for REJECTED_REFUND - expect res status 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for REJECTED_REFUND - expect operationType to be REJECTED_REFUND\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.operationType).equals('REJECTED_REFUND');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/{{rejected_refund-op-id}}",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    "{{rejected_refund-op-id}}"
                  ],
                  "query": [
                    {
                      "key": "operationType",
                      "value": "TRANSACTION",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline and Timeline Detail Transaction Discount",
          "item": [
            {
              "name": "Initiative creation",
              "item": [
                {
                  "name": "ENTE - Initiative creation",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "STEP1-Insert Initiative (Service Info)",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
                              "const serviceName = 'Test funzionali App IO Initiative with criteria and discount ' + now;\r",
                              "pm.collectionVariables.set('serviceName', serviceName);\r",
                              "pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                              "\r",
                              "pm.collectionVariables.set('channel_type', 'web');\r",
                              "pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "var jsonData = JSON.parse(responseBody);\r",
                              "// console.log('jsondata', jsonData);\r",
                              "// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
                              "pm.collectionVariables.set('initiativeId_discount', jsonData.initiativeId);\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
                              "    pm.response.to.have.status(201);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Initiative creation - STEP1 - Verify response body\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/info",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["info"]
                        },
                        "description": "Save initiative and first subset of data 'general info'"
                      },
                      "response": []
                    },
                    {
                      "name": "STEP2-Update Initiative (general Info)",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "let moment = require('moment');\r",
                              "//Format: YYYY-MM-DD\r",
                              "let today = String(moment().format('YYYY-MM-DD'));\r",
                              "let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
                              "let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
                              "let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
                              "\r",
                              "let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
                              "\r",
                              "\r",
                              "/*\r",
                              "var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
                              "pm.collectionVariables.set('...', _.random(0, 180));\r",
                              "*/\r",
                              "//_.floor(_.random(1.0, 100000.0, true),2)\r",
                              "pm.collectionVariables.set('budget', 500);\r",
                              "pm.collectionVariables.set('beneficiaryType', 'PF');\r",
                              "//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
                              "pm.collectionVariables.set('beneficiaryKnown', false);\r",
                              "pm.collectionVariables.set('rankingEnabled', false);\r",
                              "pm.collectionVariables.set('beneficiaryBudget', 100);//default max 1000\r",
                              "pm.collectionVariables.set('rankingStartDate', today);\r",
                              "pm.collectionVariables.set('rankingEndDate', todayP1);\r",
                              "pm.collectionVariables.set('startDate', today);\r",
                              "pm.collectionVariables.set('endDate', todayP3);"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"Payment - Happy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/:initiativeId_exhausted/general",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": [":initiativeId_exhausted", "general"],
                          "variable": [
                            {
                              "key": "initiativeId_exhausted",
                              "value": "{{initiativeId_discount}}"
                            }
                          ]
                        },
                        "description": "Save initiative and first subset of data 'general info'"
                      },
                      "response": []
                    },
                    {
                      "name": "STEP3-Update Initiative (criteria)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"Payment - Happy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/{{initiativeId_discount}}/beneficiary",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["{{initiativeId_discount}}", "beneficiary"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "STEP4-Update Initiative Trx-Reward rules",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"Payment - Happy case - Initiative creation - STEP4 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "setTimeout(()=> {}, 10000)\r",
                              "const d = new Date();\r",
                              "dateString = d.toISOString()\r",
                              "let endTime = dateString.split('T');\r",
                              "endTime = endTime[1].split('Z');\r",
                              "\r",
                              "pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
                              "const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
                              "rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
                              "const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
                              "pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
                              "if (selectedRewardValueType == \"PERCENTAGE\") {\r",
                              "    pm.collectionVariables.set('rewardRuleValue', 100);\r",
                              "} else {\r",
                              "    pm.collectionVariables.set('rewardRuleValue', 50);\r",
                              "}\r",
                              "\r",
                              "pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
                              "pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
                              "pm.collectionVariables.set('trxThresholdFrom', 50);\r",
                              "pm.collectionVariables.set('trxThresholdTo', 80);\r",
                              "pm.collectionVariables.set('trxCountFrom', 3);\r",
                              "pm.collectionVariables.set('trxCountTo', 11);\r",
                              "pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
                              "pm.collectionVariables.set('trxRewardLimitValue', 3);"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"initiativeRewardType\": \"DISCOUNT\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n      \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/:initiativeId_discount/reward",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": [":initiativeId_discount", "reward"],
                          "variable": [
                            {
                              "key": "initiativeId_discount",
                              "value": "{{initiativeId_discount}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "STEP5-Update Initiative Refund Rule",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"Payment - Happy case - Initiative creation - STEP5 - Responses with 204\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
                              "timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
                              "\r",
                              "const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
                              "accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
                              "\r",
                              "pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
                              "pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
                              "pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                              "*/\r",
                              "\r",
                              "/*\r",
                              "let refundType = \"timeParameter\";\r",
                              "refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
                              "\r",
                              "const refundTypeSelected = \"timeParameter\";\r",
                              "let body = {};\r",
                              "if (refundTypeSelected == \"timeParameter\") {\r",
                              "    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
                              "    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
                              "    body = {\r",
                              "        timeParameter: {\r",
                              "            timeType: timeType[timeTypeRandomIndex]\r",
                              "        }\r",
                              "    };\r",
                              "} else {\r",
                              "    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
                              "    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
                              "    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
                              "    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
                              "        body = {\r",
                              "            accumulatedAmount: {\r",
                              "                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
                              "            }\r",
                              "        };\r",
                              "    } else {\r",
                              "        body = {\r",
                              "            accumulatedAmount: {\r",
                              "                accumulatedType: \"THRESHOLD_REACHED\",\r",
                              "                refundThreshold: 10\r",
                              "            }\r",
                              "        };\r",
                              "    }\r",
                              "}\r",
                              "*/\r",
                              "/*const timeType = [\"CLOSED\", \"DAILY\", \"WEEKLY\", \"MONTHLY\", \"QUARTERLY\"];\r",
                              "timeTypeRandomIndex = _.random(0, timeType.length - 1);\r",
                              "const body = {\r",
                              "    timeParameter: {\r",
                              "        timeType: timeType[timeTypeRandomIndex]\r",
                              "    }\r",
                              "};\r",
                              "pm.collectionVariables.set('body', JSON.stringify(body));\r",
                              "*/"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": " {\r\n     \"timeParameter\": {\r\n        \"timeType\": \"DAILY\"\r\n    }\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlInitiative}}/:initiativeId_exhausted/refund",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": [":initiativeId_exhausted", "refund"],
                          "variable": [
                            {
                              "key": "initiativeId_exhausted",
                              "value": "{{initiativeId_discount}}"
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "PAGOPA - Initiative update status APPROVED",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
                              "});\r",
                              "\r",
                              "//response time is less than 1s\r",
                              "tests[\"Response time is less than 1s\"] = responseTime < 1000;"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Update initiative into APPROVED status",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"Payment - Happy case - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "//setTimeout(function(){}, 20000); //milliseconds"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalTokenPagopa}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "url": {
                          "raw": "{{baseUrlInitiative}}/{{initiativeId_discount}}/approved",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["{{initiativeId_discount}}", "approved"]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "ENTE - Initiative PUBLISHED",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                              "});\r",
                              "\r",
                              "//response time is less than 1s\r",
                              "tests[\"Response time is less than 1s\"] = responseTime < 1000;"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Initiative PUBLISHED",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"Payment - Happy case - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
                              "    pm.response.to.have.status(204);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [
                              "/*let body;\r",
                              "baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
                              "if(baseUrlInitiative.includes('localhost')){\r",
                              "    body = {\r",
                              "        mode: 'raw',\r",
                              "        raw: JSON.stringify({\r",
                              "            organizationName: 'Comune di Milano',\r",
                              "            organizationFiscalCode: '11122233344',\r",
                              "            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
                              "            organizationUserRole: 'admin'\r",
                              "        })\r",
                              "    }\r",
                              "    pm.request.headers.add({\r",
                              "        key: \"Content-Type\",\r",
                              "        value: \"application/json\"\r",
                              "    });\r",
                              "    pm.variables.set('body', JSON.stringify(body));\r",
                              "    pm.request.body.update(body);\r",
                              "}\r",
                              "*/"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disabledSystemHeaders": {}
                      },
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrlInitiative}}/{{initiativeId_discount}}/published",
                          "host": ["{{baseUrlInitiative}}"],
                          "path": ["{{initiativeId_discount}}", "published"]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Upload csv",
                  "item": [
                    {
                      "name": "Generate Portal Token",
                      "event": [
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": [""],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "let textResponse = pm.response.text()\r",
                              "\r",
                              "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                              "    //verify response HTTP status \r",
                              "    pm.response.to.have.status(200);\r",
                              "    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
                              "});\r",
                              ""
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "noauth"
                        },
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Trace",
                            "value": "true",
                            "type": "default"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/welfare/token/test",
                          "host": ["{{baseUrlToken}}"],
                          "path": ["welfare", "token", "test"]
                        }
                      },
                      "response": []
                    },
                    {
                      "name": "Upload csv",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"Payment - Happy case - Upload csv - Response status is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Upload csv - Verify response body contains status: VALIDATED\", function () {\r",
                              "    let jsonResponse = pm.response.json();\r",
                              "    pm.expect(jsonResponse.status).eql(\"VALIDATED\");\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "formdata",
                          "formdata": [
                            {
                              "key": "file",
                              "type": "file",
                              "src": "./postman/example_merchant_valid.csv"
                            }
                          ]
                        },
                        "url": {
                          "raw": "{{baseUrlToken}}/merchant/initiative/{{initiativeId_discount}}/upload",
                          "host": ["{{baseUrlToken}}"],
                          "path": [
                            "merchant",
                            "initiative",
                            "{{initiativeId_discount}}",
                            "upload"
                          ],
                          "query": [
                            {
                              "key": "",
                              "value": null,
                              "disabled": true
                            }
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                },
                {
                  "name": "Get Merchant list on initiative",
                  "item": [
                    {
                      "name": "Get Merchant List",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              "pm.test(\"Payment - Happy case - Get merchant list - Response status is 200\", function () {\r",
                              "    pm.response.to.have.status(200);\r",
                              "});\r",
                              "\r",
                              "pm.test(\"Payment - Happy case - Get merchant list - Verify response body contains merchantId,businessName,fiscalCode,merchantStatus,updateStatusDate\", function () {\r",
                              "\r",
                              "    const response = pm.response.json().content[0];\r",
                              "    pm.expect(response).have.property(\"merchantId\");\r",
                              "    pm.expect(response).have.property(\"businessName\");\r",
                              "    pm.expect(response).have.property(\"fiscalCode\");\r",
                              "    pm.expect(response).have.property(\"merchantStatus\");\r",
                              "    pm.expect(response).have.property(\"updateStatusDate\");\r",
                              "\r",
                              "    //const filterByMerchantId = response.filter(merchantId => merchantId.merchantId === pm.collectionVariables.get(\"merchantId\"));\r",
                              "    pm.collectionVariables.set(\"merchantId\", response.merchantId);\r",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        },
                        {
                          "listen": "prerequest",
                          "script": {
                            "exec": ["setTimeout(() => {}, 10000);"],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "request": {
                        "auth": {
                          "type": "bearer",
                          "bearer": [
                            {
                              "key": "token",
                              "value": "{{identityPortalToken}}",
                              "type": "string"
                            }
                          ]
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrlMerchant}}/initiative/{{initiativeId_discount}}/merchants",
                          "host": ["{{baseUrlMerchant}}"],
                          "path": [
                            "initiative",
                            "{{initiativeId_discount}}",
                            "merchants"
                          ]
                        }
                      },
                      "response": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "Onboarding",
              "item": [
                {
                  "name": "Generate Token IO",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Payment - Happy case - Onboarding - Generate Token IO', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [""],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{genericSubscriptionKey}}",
                        "type": "default"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "default"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_1}}",
                      "host": ["{{baseUrl}}"],
                      "path": ["rtd", "mock-io", "login"],
                      "query": [
                        {
                          "key": "fiscalCode",
                          "value": "{{CF_1}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Accept T&C",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Payment - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{apimSubscriptionKey}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_discount}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "onboarding", ""]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Prerequisites Check",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Payment - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
                          "    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{apimSubscriptionKey}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_discount}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/initiative",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "onboarding", "initiative"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "PDND + Autocertification",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Payment - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
                          "    pm.response.to.have.status(202);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_discount}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/onboarding/consent",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "onboarding", "consent"]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Create Transaction 1",
              "item": [
                {
                  "name": "Generate Merchant Token",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": ["setTimeout(() => {}, 10000);"],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let textResponse = pm.response.text()\r",
                          "\r",
                          "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                          "});\r",
                          "\r",
                          "//response time is less than 1s\r",
                          "tests[\"Response time is less than 1s\"] = responseTime < 1000;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"{{merchantId}}\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlToken}}/merchant/token/test",
                      "host": ["{{baseUrlToken}}"],
                      "path": ["merchant", "token", "test"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[ACQUIRER] Create Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
                          "    pm.response.to.have.status(201);\r",
                          "});\r",
                          "pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    let trxCode = jsonResponse.trxCode;\r",
                          "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                          "    pm.expect(jsonResponse.qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
                          "    pm.expect(jsonResponse.qrcodeTxtUrl).equals(`https://continua.io.pagopa.it/idpay/auth/${trxCode}`);\r",
                          "});\r",
                          "\r",
                          "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                          "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "setTimeout(() => {}, 15000);\r",
                          "let moment = require('moment');\r",
                          "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                          "\r",
                          "pm.collectionVariables.set(\"trxDate\", today);\r",
                          "\r",
                          "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{merchantPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      },
                      {
                        "key": "x-merchant-id",
                        "value": "{{merchantId}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_discount}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "merchant", "portal", "transactions"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Generate Token IO",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Payment - Happy case - Onboarding - Generate Token IO', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": ["setTimeout(() => {}, 10000);"],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{genericSubscriptionKey}}",
                        "type": "default"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "{{Ocp-Apim-Trace}}",
                        "type": "default"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_1}}",
                      "host": ["{{baseUrl}}"],
                      "path": ["rtd", "mock-io", "login"],
                      "query": [
                        {
                          "key": "fiscalCode",
                          "value": "{{CF_1}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[IO] Pre-Authorize Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE] - Verify response status is IDENTIFIED and residualBudget is: (initiativeBudget-totalReward+reward)\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    let initiativeBudgetEuro= jsonResponse.counters.initiativeBudget*100;\r",
                          "    let totalRewardEuro= jsonResponse.counters.totalReward*100;\r",
                          "    pm.expect(jsonResponse.status).to.eql(\"IDENTIFIED\");\r",
                          "    pm.expect(jsonResponse.residualBudget).to.eql(initiativeBudgetEuro-totalRewardEuro+jsonResponse.reward);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": ["setTimeout(() => {}, 20000);"],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "payment",
                        "qr-code",
                        ":trxCode",
                        "relate-user"
                      ],
                      "variable": [
                        {
                          "key": "trxCode",
                          "value": "{{trxCode}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[IO] Authorize Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE] - Verify response status is AUTHORIZED and residualBudget is: initiativeBudget subtract totalReward\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.status).to.eql(\"AUTHORIZED\");\r",
                          "    let initiativeBudgetEuro = jsonResponse.counters.initiativeBudget * 100;\r",
                          "    let totalRewardEuro = jsonResponse.counters.totalReward * 100;\r",
                          "    pm.expect(jsonResponse.residualBudget).to.eql(initiativeBudgetEuro-totalRewardEuro);\r",
                          "});\r",
                          "\r",
                          "pm.collectionVariables.set(\"effectiveAmount\", pm.response.json().amountCents);\r",
                          "pm.collectionVariables.set(\"rewardAmount\", pm.response.json().reward);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": ["setTimeout(() => {}, 7000);"],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "payment",
                        "qr-code",
                        ":trxCode",
                        "authorize"
                      ],
                      "variable": [
                        {
                          "key": "trxCode",
                          "value": "{{trxCode}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[ACQUIRER] Confirm Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Payment - Happy case: [ACQUIRER] Confirm transaction [QR-CODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [ACQUIRER] Confirm transaction [QR-CODE] - Verify response status is REWARDED\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.status).to.eql(\"REWARDED\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{merchantPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "x-merchant-id",
                        "value": "{{merchantId}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/merchant/portal//transactions/:transactionId/confirm",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "merchant",
                        "portal",
                        "",
                        "transactions",
                        ":transactionId",
                        "confirm"
                      ],
                      "variable": [
                        {
                          "key": "transactionId",
                          "value": "{{transactionId}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Cancel transaction by merchant",
              "item": [
                {
                  "name": "Generate Merchant Token",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": ["//setTimeout(() => {}, 10000);"],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let textResponse = pm.response.text()\r",
                          "\r",
                          "pm.test('Payment - Happy case - Initiative creation - Generate Portal Token (Merchant)', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"merchantPortalToken\", textResponse);\r",
                          "});\r",
                          "\r",
                          "//response time is less than 1s\r",
                          "tests[\"Response time is less than 1s\"] = responseTime < 1000;"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2ODcyNTY3OTQsImV4cCI6MTY4NzI4NTU5NCwiYXVkIjoiaWRwYXkubWVyY2hhbnQud2VsZmFyZS5wYWdvcGEuaXQiLCJpc3MiOiJodHRwczovL2FwaS1pby5kZXYuY3N0YXIucGFnb3BhLml0IiwidWlkIjoiMmY5ZDk3MGQtMzFmYi00MzkzLTg3MjEtMmNhOTIxYmIyYmJjIiwibmFtZSI6ImVzZXJjZW50ZSIsImZhbWlseV9uYW1lIjoidGVzdCIsImVtYWlsIjoiZXNlcmNlbnRlX2RldkB0ZXN0LmVtYWlsLml0Iiwib3JnX2lkIjoiMmI0OGJmOTYtZmQ3NC00NzdlLWE3MGEtMjg2YjQxMGYwMjBhIiwib3JnX3ZhdCI6IjMzNDQ0NDMzNDg4Iiwib3JnX25hbWUiOiJFc2VyY2VudGUgZGkgdGVzdCBJZFBheSIsIm9yZ19wYXJ0eV9yb2xlIjoiTUFOQUdFUiIsIm9yZ19yb2xlIjoiYWRtaW4ifQ.s2Iv-nUBUtM6B9-1C_zw6JcwIUR2X0aXY1lVCntNsIbGwOPAz7f0dYfZuRB_4qyz6Zy4P7ImJKF5ANrDUZL0zrT0DizxM6mvWqpvS7K82gVOyB-h01My1V_YEs_eU_-iIIt2NqkpG-UjhRw7mRcz13IECAnuQrUjmyj1eKO81qvSUA1HqyBVS6Tq2pVIZfKFYFKVY-L3Ojx2z2au7xItDVjx5LFArlIK98TMSyZBLqGDaEo-5eGfwjdbHMCUG5Ude-FKieEyyPHDF9n5HQSlXEWTjoVYNikWcwCVtsYsDqIxMC08szgvnb7V6ELSutsVAl4HvEFTwqmAGhdmE4CPXw",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"aud\": \"idpay.merchant.welfare.pagopa.it\",\r\n  \"iss\": \"https://api-io.dev.cstar.pagopa.it\",\r\n  \"uid\": \"{{uid_Merchant}}\",\r\n  \"name\": \"esercente\",\r\n  \"familyName\": \"test\",\r\n  \"email\": \"{{email_Merchant}}\",\r\n  \"acquirerId\": \"PAGOPA\",\r\n  \"merchantId\": \"{{merchantId}}\",\r\n  \"orgId\": \"{{orgId_Merchant}}\",\r\n  \"orgVAT\": \"33444433488\",\r\n  \"orgName\": \"Esercente di test IdPay\",\r\n  \"orgPartyRole\": \"MANAGER\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n\r\n\r\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlToken}}/merchant/token/test",
                      "host": ["{{baseUrlToken}}"],
                      "path": ["merchant", "token", "test"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[ACQUIRER] Create Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE]\", function () {\r",
                          "    pm.response.to.have.status(201);\r",
                          "});\r",
                          "pm.test(\"Payment - Happy case: [ACQUIRER] Create transaction [QR-CODE] - Verify response body contains fields\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    let trxCode = jsonResponse.trxCode;\r",
                          "    pm.expect(jsonResponse).have.property(\"trxCode\");\r",
                          "    pm.expect(jsonResponse.qrcodePngUrl).equals(`https://continua.io.pagopa.it/qrcode.png?feat=idpay&trxcode=${trxCode}`);\r",
                          "    pm.expect(jsonResponse.qrcodeTxtUrl).equals(`https://continua.io.pagopa.it/idpay/auth/${trxCode}`);\r",
                          "});\r",
                          "\r",
                          "pm.collectionVariables.set(\"trxCode\", pm.response.json().trxCode);\r",
                          "pm.collectionVariables.set(\"transactionId\", pm.response.json().id);\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "setTimeout(() => {}, 15000);\r",
                          "\r",
                          "let moment = require('moment');\r",
                          "let today = String(moment().add(3, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ'));\r",
                          "\r",
                          "pm.collectionVariables.set(\"trxDate\", today);\r",
                          "\r",
                          "pm.collectionVariables.set(\"randomNum\", Math.floor(Math.random() * 1000))"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{merchantPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "true",
                        "type": "text"
                      },
                      {
                        "key": "x-merchant-id",
                        "value": "{{merchantId}}",
                        "type": "text"
                      },
                      {
                        "key": "",
                        "value": "",
                        "type": "text",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"initiativeId\" : \"{{initiativeId_discount}}\",\r\n    \"idTrxAcquirer\": \"IDTRXACQUIRER{{randomNum}}\",\r\n    \"trxDate\": \"{{trxDate}}\",\r\n    \"amountCents\": \"5000\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/idpay/merchant/portal/transactions",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "merchant", "portal", "transactions"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Generate Token IO",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": ["setTimeout(() => {}, 10000);"],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Payment - Happy case - Onboarding - Generate Token IO', () => {\r",
                          "    //verify response HTTP status \r",
                          "    pm.response.to.have.status(200);\r",
                          "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key",
                        "value": "{{genericSubscriptionKey}}",
                        "type": "default"
                      },
                      {
                        "key": "Ocp-Apim-Trace",
                        "value": "{{Ocp-Apim-Trace}}",
                        "type": "default"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_1}}",
                      "host": ["{{baseUrl}}"],
                      "path": ["rtd", "mock-io", "login"],
                      "query": [
                        {
                          "key": "fiscalCode",
                          "value": "{{CF_1}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[IO] Pre-Authorize Transaction",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [IO] Pre-Authorize transaction [QR-CODE] - Verify response status is IDENTIFIED and residualBudget is: (initiativeBudget-totalReward+reward)\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    let initiativeBudgetEuro= jsonResponse.counters.initiativeBudget*100;\r",
                          "    let totalRewardEuro= jsonResponse.counters.totalReward*100;\r",
                          "    pm.expect(jsonResponse.status).to.eql(\"IDENTIFIED\");\r",
                          "    pm.expect(jsonResponse.residualBudget).to.eql(initiativeBudgetEuro-totalRewardEuro+jsonResponse.reward);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": ["setTimeout(() => {}, 10000);"],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/relate-user",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "payment",
                        "qr-code",
                        ":trxCode",
                        "relate-user"
                      ],
                      "variable": [
                        {
                          "key": "trxCode",
                          "value": "{{trxCode}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[IO] Authorize Transaction",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": ["setTimeout(() => {}, 10000);"],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE]\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Payment - Happy case: [IO] Authorize transaction [QR-CODE] - Verify response status is AUTHORIZED and residualBudget is: initiativeBudget subtract totalReward\", function () {\r",
                          "    let jsonResponse = pm.response.json();\r",
                          "    pm.expect(jsonResponse.status).to.eql(\"AUTHORIZED\");\r",
                          "    let initiativeBudgetEuro = jsonResponse.counters.initiativeBudget * 100;\r",
                          "    let totalRewardEuro = jsonResponse.counters.totalReward * 100;\r",
                          "    pm.expect(jsonResponse.residualBudget).to.eql(initiativeBudgetEuro-totalRewardEuro);\r",
                          "});\r",
                          "\r",
                          "pm.collectionVariables.set(\"effectiveAmount\", pm.response.json().amountCents);\r",
                          "pm.collectionVariables.set(\"rewardAmount\", pm.response.json().reward);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/payment/qr-code/:trxCode/authorize",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "payment",
                        "qr-code",
                        ":trxCode",
                        "authorize"
                      ],
                      "variable": [
                        {
                          "key": "trxCode",
                          "value": "{{trxCode}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[IO] Cancel transaction by merchant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Payment - Happy case: Cancel transaction by citizen - [IO] Cancel transaction\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": ["setTimeout(() => {}, 15000);"],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{merchantPortalToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "",
                        "value": "",
                        "type": "text",
                        "disabled": true
                      },
                      {
                        "key": "",
                        "value": "",
                        "type": "text",
                        "disabled": true
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/merchant/portal/transactions/:transactionId",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "merchant",
                        "portal",
                        "transactions",
                        ":transactionId"
                      ],
                      "variable": [
                        {
                          "key": "transactionId",
                          "value": "{{transactionId}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Get Timeline",
              "item": [
                {
                  "name": "GET Timeline No filter",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Timeline - Happy case - Get Timeline - Filter by operationType for TRANSACTION - expect res status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Timeline - Happy case - Get Timeline with filter by operationType for TRANSACTION - expect field operationList to have 1 event and operationType to be TRANSACTION  \", function () {\r",
                          "    let jsonResponse = pm.response.json()\r",
                          "    pm.expect(jsonResponse.operationList.length).equals(3);\r",
                          "    pm.collectionVariables.set(\"transaction-op-id-cancelled\", jsonResponse.operationList[0].operationId);\r",
                          "    pm.collectionVariables.set(\"transaction-op-id-authorized\", jsonResponse.operationList[1].operationId);\r",
                          "    pm.collectionVariables.set(\"transaction-op-id-rewarded\", jsonResponse.operationList[2].operationId);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": ["setTimeout(() => {}, 8000);"],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId_discount}}",
                      "host": ["{{baseUrl}}"],
                      "path": ["idpay", "timeline", "{{initiativeId_discount}}"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GET Timeline AUTHORIZED",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Timeline - Happy case - Get Timeline - Filter by operationType for TRANSACTION - expect res status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Timeline - Happy case - Get Timeline with filter by operationType for TRANSACTION - expect field operationList to have 1 event and operationType to be TRANSACTION  \", function () {\r",
                          "    let jsonResponse = pm.response.json()\r",
                          "    pm.expect(jsonResponse.operationList.length).equals(2);\r",
                          "    pm.expect(jsonResponse.operationList[0].status).equals('AUTHORIZED');\r",
                          "    pm.expect(jsonResponse.operationList[1].status).equals('REWARDED');\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId_discount}}?operationType=AUTHORIZED",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "timeline",
                        "{{initiativeId_discount}}"
                      ],
                      "query": [
                        {
                          "key": "operationType",
                          "value": "AUTHORIZED"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GET Timeline CANCELLED",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Timeline - Happy case - Get Timeline - Filter by operationType for TRANSACTION - expect res status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Timeline - Happy case - Get Timeline with filter by operationType for TRANSACTION - expect field operationList to have 1 event and operationType to be TRANSACTION  \", function () {\r",
                          "    let jsonResponse = pm.response.json()\r",
                          "    pm.expect(jsonResponse.operationList.length).equals(1);\r",
                          "    pm.expect(jsonResponse.operationList[0].status).equals('CANCELLED');\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId_discount}}?operationType=CANCELLED",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "timeline",
                        "{{initiativeId_discount}}"
                      ],
                      "query": [
                        {
                          "key": "operationType",
                          "value": "CANCELLED"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GET Timeline Detail - authorized",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for TRANSACTION - expect res status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for Rejected_Add_Instrument - expect operationType to be TRANSACTION\", function () {\r",
                          "    let jsonResponse = pm.response.json()\r",
                          "    pm.expect(jsonResponse.status).equals('AUTHORIZED');\r",
                          "    pm.expect(jsonResponse).have.property(\"amount\");\r",
                          "    pm.expect(jsonResponse).have.property(\"businessName\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": ["setTimeout(() => {}, 8000);"],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId_discount}}/{{transaction-op-id-authorized}}",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "timeline",
                        "{{initiativeId_discount}}",
                        "{{transaction-op-id-authorized}}"
                      ],
                      "query": [
                        {
                          "key": "operationType",
                          "value": "TRANSACTION",
                          "disabled": true
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GET Timeline Detail - rewarded",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for TRANSACTION - expect res status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for Rejected_Add_Instrument - expect operationType to be TRANSACTION\", function () {\r",
                          "    let jsonResponse = pm.response.json()\r",
                          "    pm.expect(jsonResponse.status).equals('REWARDED');\r",
                          "    pm.expect(jsonResponse).have.property(\"amount\");\r",
                          "    pm.expect(jsonResponse).have.property(\"businessName\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": ["setTimeout(() => {}, 8000);"],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId_discount}}/{{transaction-op-id-rewarded}}",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "timeline",
                        "{{initiativeId_discount}}",
                        "{{transaction-op-id-rewarded}}"
                      ],
                      "query": [
                        {
                          "key": "operationType",
                          "value": "TRANSACTION",
                          "disabled": true
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "GET Timeline Detail - cancelled",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for TRANSACTION - expect res status 200\", function () {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by operation ID for Rejected_Add_Instrument - expect operationType to be TRANSACTION\", function () {\r",
                          "    let jsonResponse = pm.response.json()\r",
                          "    pm.expect(jsonResponse.status).equals('CANCELLED');\r",
                          "    pm.expect(jsonResponse).have.property(\"amount\");\r",
                          "    pm.expect(jsonResponse).have.property(\"businessName\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": ["setTimeout(() => {}, 8000);"],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{tokenIO}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId_discount}}/{{transaction-op-id-cancelled}}",
                      "host": ["{{baseUrl}}"],
                      "path": [
                        "idpay",
                        "timeline",
                        "{{initiativeId_discount}}",
                        "{{transaction-op-id-cancelled}}"
                      ],
                      "query": [
                        {
                          "key": "operationType",
                          "value": "TRANSACTION",
                          "disabled": true
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Delete Initiative",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Happy Case - Delete Initiative - Status test 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId_discount}}",
                  "host": [
                    "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
                  ],
                  "path": ["idpay", "initiative", "{{initiativeId_discount}}"]
                }
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "Unhappy Case",
      "item": [
        {
          "name": "Get Timeline Detail KO [wrong ope Id] Paid_Refund 404",
          "item": [
            {
              "name": "Generate Token IO",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Timeline - Generate Portal Token (Ente Admin) - to test Unhappy cases', () => {\r",
                      "    //verify response HTTP status \r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key",
                    "value": "{{genericSubscriptionKey}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_1}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["rtd", "mock-io", "login"],
                  "query": [
                    {
                      "key": "fiscalCode",
                      "value": "{{CF_1}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GET Timeline Detail - KO 404",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline Detail - Unhappy case - Get Timeline Detail- Filter by not existing operation id - expect res status 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline Detail - Happy case - Get Timeline Detail- Filter by not existing operation id - expect  response code to be 404 - response message to be: Cannot find the requested operation! \", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.code).equals(404);\r",
                      "    pm.expect(jsonResponse.message).equals('Cannot find the requested operation!');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/{{CF_1}}",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    "{{CF_1}}"
                  ],
                  "query": [
                    {
                      "key": "operationType",
                      "value": "TRANSACTION",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get Timeline KO [wrong page size filter] 400",
          "item": [
            {
              "name": "GET Timeline - KO 400",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Unhappy case - Get Timeline - Filter by wrong page size (100) - expect res status 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Unhappy case - Get Timeline - Filter by wrong page size (100) - expect response code to be 400 - response message to be Parameter [size] must be less than or equal to 10\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.code).equals(400);\r",
                      "    pm.expect(jsonResponse.message).equals(\"Parameter [size] must be less than or equal to 10\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&size=100",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "operationType",
                      "value": "TRANSACTION",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Get  Timeline KO not valid CF",
          "item": [
            {
              "name": "Generate Token IO",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Timeline - Happy case - Get Timeline empty list with not valid CF - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
                      "    //verify response HTTP status \r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key",
                    "value": "{{genericSubscriptionKey}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{test cf}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["rtd", "mock-io", "login"],
                  "query": [
                    {
                      "key": "fiscalCode",
                      "value": "{{test cf}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "GET Timeline 400",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Timeline - Unhappy case - Get Timeline empty list with not valid CF - res status 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Timeline - Uhappy case - Get Timeline empty list with not valid CF - code: FISCAL_CODE_NOT_VALID\", function () {\r",
                      "    let jsonResponse = pm.response.json()\r",
                      "    pm.expect(jsonResponse.code).equals(\"FISCAL_CODE_NOT_VALID\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{tokenIO}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/idpay/timeline/{{initiativeId timeline}}/?page=0&size=10",
                  "host": ["{{baseUrl}}"],
                  "path": [
                    "idpay",
                    "timeline",
                    "{{initiativeId timeline}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "10"
                    },
                    {
                      "key": "operationType",
                      "value": "TRANSACTION",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{tokenIO}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "tokenIO",
      "value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0X3VzZXIiLCJpYXQiOjE2NTc4MDUyNjYsImV4cCI6MTY1NzgwODg2Nn0.5TdayX1X9lrIJVJ5p3DHqt4hBd2zVyuYCtPG-Kwffds"
    },
    {
      "key": "Ocp-Apim-Trace",
      "value": "true"
    },
    {
      "key": "test cf",
      "value": "test_Fake_User"
    },
    {
      "key": "initiativeId timeline",
      "value": "63fdd546fea3f35a5644e735"
    },
    {
      "key": "transaction-op-id",
      "value": ""
    },
    {
      "key": "reversal-op-id",
      "value": ""
    },
    {
      "key": "add_instrument-op-id",
      "value": ""
    },
    {
      "key": "delete_instrument-op-id",
      "value": ""
    },
    {
      "key": "add_iban-op-id",
      "value": ""
    },
    {
      "key": "onboarding-op-id",
      "value": ""
    },
    {
      "key": "paid_refund-op-id",
      "value": ""
    },
    {
      "key": "rejected_refund-op-id",
      "value": ""
    },
    {
      "key": "initiativeId_discount",
      "value": "649ee68ef604477a2463f8a0",
      "type": "string"
    },
    {
      "key": "identityPortalToken",
      "value": ""
    },
    {
      "key": "serviceName",
      "value": ""
    },
    {
      "key": "description",
      "value": ""
    },
    {
      "key": "channel_type",
      "value": ""
    },
    {
      "key": "channel_contact",
      "value": ""
    },
    {
      "key": "budget",
      "value": ""
    },
    {
      "key": "beneficiaryType",
      "value": ""
    },
    {
      "key": "beneficiaryKnown",
      "value": ""
    },
    {
      "key": "rankingEnabled",
      "value": ""
    },
    {
      "key": "beneficiaryBudget",
      "value": ""
    },
    {
      "key": "rankingStartDate",
      "value": ""
    },
    {
      "key": "rankingEndDate",
      "value": ""
    },
    {
      "key": "startDate",
      "value": ""
    },
    {
      "key": "endDate",
      "value": ""
    },
    {
      "key": "rewardRuleType",
      "value": ""
    },
    {
      "key": "rewardValueType",
      "value": ""
    },
    {
      "key": "rewardRuleValue",
      "value": ""
    },
    {
      "key": "trxDaysOfWeek",
      "value": ""
    },
    {
      "key": "trxDayEndTime",
      "value": ""
    },
    {
      "key": "trxThresholdFrom",
      "value": ""
    },
    {
      "key": "trxThresholdTo",
      "value": ""
    },
    {
      "key": "trxCountFrom",
      "value": ""
    },
    {
      "key": "trxCountTo",
      "value": ""
    },
    {
      "key": "trxRewardLimitFrequency",
      "value": ""
    },
    {
      "key": "trxRewardLimitValue",
      "value": ""
    },
    {
      "key": "identityPortalTokenPagopa",
      "value": ""
    },
    {
      "key": "merchantId",
      "value": ""
    },
    {
      "key": "merchantPortalToken",
      "value": ""
    },
    {
      "key": "trxDate",
      "value": ""
    },
    {
      "key": "randomNum",
      "value": ""
    },
    {
      "key": "trxCode",
      "value": ""
    },
    {
      "key": "transactionId",
      "value": ""
    },
    {
      "key": "effectiveAmount",
      "value": ""
    },
    {
      "key": "rewardAmount",
      "value": ""
    },
    {
      "key": "transaction-op-id-cancelled",
      "value": ""
    },
    {
      "key": "transaction-op-id-authorized",
      "value": ""
    },
    {
      "key": "transaction-op-id-rewarded",
      "value": ""
    }
  ]
}
